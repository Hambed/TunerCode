
ProjectCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  000016ca  0000175e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008000da  008000da  000017d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f4a  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000678  00000000  00000000  00002832  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a39  00000000  00000000  00002eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000038e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000465  00000000  00000000  00003ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bde  00000000  00000000  00003f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004b17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ba c0       	rjmp	.+372    	; 0x176 <__ctors_end>
       2:	7c c1       	rjmp	.+760    	; 0x2fc <__vector_1>
       4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
       6:	d2 c0       	rjmp	.+420    	; 0x1ac <__bad_interrupt>
       8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
       a:	d0 c0       	rjmp	.+416    	; 0x1ac <__bad_interrupt>
       c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
       e:	ce c0       	rjmp	.+412    	; 0x1ac <__bad_interrupt>
      10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
      12:	cd c0       	rjmp	.+410    	; 0x1ae <__vector_9>
      14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
      16:	ca c0       	rjmp	.+404    	; 0x1ac <__bad_interrupt>
      18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
      1a:	c8 c0       	rjmp	.+400    	; 0x1ac <__bad_interrupt>
      1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
      1e:	c6 c0       	rjmp	.+396    	; 0x1ac <__bad_interrupt>
      20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
      22:	08 00       	.word	0x0008	; ????
      24:	00 00       	nop
      26:	be 92       	st	-X, r11
      28:	24 49       	sbci	r18, 0x94	; 148
      2a:	12 3e       	cpi	r17, 0xE2	; 226
      2c:	ab aa       	std	Y+51, r10	; 0x33
      2e:	aa 2a       	or	r10, r26
      30:	be cd       	rjmp	.-1156   	; 0xfffffbae <__eeprom_end+0xff7efbae>
      32:	cc cc       	rjmp	.-1640   	; 0xfffff9cc <__eeprom_end+0xff7ef9cc>
      34:	4c 3e       	cpi	r20, 0xEC	; 236
      36:	00 00       	nop
      38:	00 80       	ld	r0, Z
      3a:	be ab       	std	Y+54, r27	; 0x36
      3c:	aa aa       	std	Y+50, r10	; 0x32
      3e:	aa 3e       	cpi	r26, 0xEA	; 234
      40:	00 00       	nop
      42:	00 00       	nop
      44:	bf 00       	.word	0x00bf	; ????
      46:	00 00       	nop
      48:	80 3f       	cpi	r24, 0xF0	; 240
      4a:	00 00       	nop
      4c:	00 00       	nop
      4e:	00 08       	sbc	r0, r0
      50:	41 78       	andi	r20, 0x81	; 129
      52:	d3 bb       	out	0x13, r29	; 19
      54:	43 87       	std	Z+11, r20	; 0x0b
      56:	d1 13       	cpse	r29, r17
      58:	3d 19       	sub	r19, r13
      5a:	0e 3c       	cpi	r16, 0xCE	; 206
      5c:	c3 bd       	out	0x23, r28	; 35
      5e:	42 82       	std	Z+2, r4	; 0x02
      60:	ad 2b       	or	r26, r29
      62:	3e 68       	ori	r19, 0x8E	; 142
      64:	ec 82       	std	Y+4, r14	; 0x04
      66:	76 be       	out	0x36, r7	; 54
      68:	d9 8f       	std	Y+25, r29	; 0x19
      6a:	e1 a9       	ldd	r30, Z+49	; 0x31
      6c:	3e 4c       	sbci	r19, 0xCE	; 206
      6e:	80 ef       	ldi	r24, 0xF0	; 240
      70:	ff be       	out	0x3f, r15	; 63
      72:	01 c4       	rjmp	.+2050   	; 0x876 <main+0x144>
      74:	ff 7f       	andi	r31, 0xFF	; 255
      76:	3f 00       	.word	0x003f	; ????
      78:	00 00       	nop
	...

0000007c <__trampolines_end>:
      7c:	00 40       	sbci	r16, 0x00	; 0
      7e:	7a 10       	cpse	r7, r10
      80:	f3 5a       	subi	r31, 0xA3	; 163
      82:	00 a0       	ldd	r0, Z+32	; 0x20
      84:	72 4e       	sbci	r23, 0xE2	; 226
      86:	18 09       	sbc	r17, r8
      88:	00 10       	cpse	r0, r0
      8a:	a5 d4       	rcall	.+2378   	; 0x9d6 <main+0x2a4>
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	00 e8       	ldi	r16, 0x80	; 128
      90:	76 48       	sbci	r23, 0x86	; 134
      92:	17 00       	.word	0x0017	; ????
      94:	00 e4       	ldi	r16, 0x40	; 64
      96:	0b 54       	subi	r16, 0x4B	; 75
      98:	02 00       	.word	0x0002	; ????
      9a:	00 ca       	rjmp	.-3072   	; 0xfffff49c <__eeprom_end+0xff7ef49c>
      9c:	9a 3b       	cpi	r25, 0xBA	; 186
      9e:	00 00       	nop
      a0:	00 e1       	ldi	r16, 0x10	; 16
      a2:	f5 05       	cpc	r31, r5
      a4:	00 00       	nop
      a6:	80 96       	adiw	r24, 0x20	; 32
      a8:	98 00       	.word	0x0098	; ????
      aa:	00 00       	nop
      ac:	40 42       	sbci	r20, 0x20	; 32
      ae:	0f 00       	.word	0x000f	; ????
      b0:	00 00       	nop
      b2:	a0 86       	std	Z+8, r10	; 0x08
      b4:	01 00       	.word	0x0001	; ????
      b6:	00 00       	nop
      b8:	10 27       	eor	r17, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	e8 03       	fmulsu	r22, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	64 00       	.word	0x0064	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	0a 00       	.word	0x000a	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	01 00       	.word	0x0001	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	2c 76       	andi	r18, 0x6C	; 108
      d8:	d8 88       	ldd	r13, Y+16	; 0x10
      da:	dc 67       	ori	r29, 0x7C	; 124
      dc:	4f 08       	sbc	r4, r15
      de:	23 df       	rcall	.-442    	; 0xffffff26 <__eeprom_end+0xff7eff26>
      e0:	c1 df       	rcall	.-126    	; 0x64 <__SREG__+0x25>
      e2:	ae 59       	subi	r26, 0x9E	; 158
      e4:	e1 b1       	in	r30, 0x01	; 1
      e6:	b7 96       	adiw	r30, 0x27	; 39
      e8:	e5 e3       	ldi	r30, 0x35	; 53
      ea:	e4 53       	subi	r30, 0x34	; 52
      ec:	c6 3a       	cpi	r28, 0xA6	; 166
      ee:	e6 51       	subi	r30, 0x16	; 22
      f0:	99 76       	andi	r25, 0x69	; 105
      f2:	96 e8       	ldi	r25, 0x86	; 134
      f4:	e6 c2       	rjmp	.+1484   	; 0x6c2 <float2str2UART+0x3c>
      f6:	84 26       	eor	r8, r20
      f8:	eb 89       	ldd	r30, Y+19	; 0x13
      fa:	8c 9b       	sbis	0x11, 4	; 17
      fc:	62 ed       	ldi	r22, 0xD2	; 210
      fe:	40 7c       	andi	r20, 0xC0	; 192
     100:	6f fc       	.word	0xfc6f	; ????
     102:	ef bc       	out	0x2f, r14	; 47
     104:	9c 9f       	mul	r25, r28
     106:	40 f2       	brcs	.-112    	; 0x98 <__trampolines_end+0x1c>
     108:	ba a5       	ldd	r27, Y+42	; 0x2a
     10a:	6f a5       	ldd	r22, Y+47	; 0x2f
     10c:	f4 90       	lpm	r15, Z
     10e:	05 5a       	subi	r16, 0xA5	; 165
     110:	2a f7       	brpl	.-54     	; 0xdc <__trampolines_end+0x60>
     112:	5c 93       	st	X, r21
     114:	6b 6c       	ori	r22, 0xCB	; 203
     116:	f9 67       	ori	r31, 0x79	; 121
     118:	6d c1       	rjmp	.+730    	; 0x3f4 <__vector_1+0xf8>
     11a:	1b fc       	.word	0xfc1b	; ????
     11c:	e0 e4       	ldi	r30, 0x40	; 64
     11e:	0d 47       	sbci	r16, 0x7D	; 125
     120:	fe f5       	brtc	.+126    	; 0x1a0 <.do_clear_bss_loop>
     122:	20 e6       	ldi	r18, 0x60	; 96
     124:	b5 00       	.word	0x00b5	; ????
     126:	d0 ed       	ldi	r29, 0xD0	; 208
     128:	90 2e       	mov	r9, r16
     12a:	03 00       	.word	0x0003	; ????
     12c:	94 35       	cpi	r25, 0x54	; 84
     12e:	77 05       	cpc	r23, r7
     130:	00 80       	ld	r0, Z
     132:	84 1e       	adc	r8, r20
     134:	08 00       	.word	0x0008	; ????
     136:	00 20       	and	r0, r0
     138:	4e 0a       	sbc	r4, r30
     13a:	00 00       	nop
     13c:	00 c8       	rjmp	.-4096   	; 0xfffff13e <__eeprom_end+0xff7ef13e>
     13e:	0c 33       	cpi	r16, 0x3C	; 60
     140:	33 33       	cpi	r19, 0x33	; 51
     142:	33 0f       	add	r19, r19
     144:	98 6e       	ori	r25, 0xE8	; 232
     146:	12 83       	std	Z+2, r17	; 0x02
     148:	11 41       	sbci	r17, 0x11	; 17
     14a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14c:	21 14       	cp	r2, r1
     14e:	89 3b       	cpi	r24, 0xB9	; 185
     150:	e6 55       	subi	r30, 0x56	; 86
     152:	16 cf       	rjmp	.-468    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     154:	fe e6       	ldi	r31, 0x6E	; 110
     156:	db 18       	sub	r13, r11
     158:	d1 84       	ldd	r13, Z+9	; 0x09
     15a:	4b 38       	cpi	r20, 0x8B	; 139
     15c:	1b f7       	brvc	.-58     	; 0x124 <__trampolines_end+0xa8>
     15e:	7c 1d       	adc	r23, r12
     160:	90 1d       	adc	r25, r0
     162:	a4 bb       	out	0x14, r26	; 20
     164:	e4 24       	eor	r14, r4
     166:	20 32       	cpi	r18, 0x20	; 32
     168:	84 72       	andi	r24, 0x24	; 36
     16a:	5e 22       	and	r5, r30
     16c:	81 00       	.word	0x0081	; ????
     16e:	c9 f1       	breq	.+114    	; 0x1e2 <__vector_9+0x34>
     170:	24 ec       	ldi	r18, 0xC4	; 196
     172:	a1 e5       	ldi	r26, 0x51	; 81
     174:	3d 27       	eor	r19, r29

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf e5       	ldi	r28, 0x5F	; 95
     17c:	d2 e0       	ldi	r29, 0x02	; 2
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	10 e0       	ldi	r17, 0x00	; 0
     184:	a0 e6       	ldi	r26, 0x60	; 96
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	ea ec       	ldi	r30, 0xCA	; 202
     18a:	f6 e1       	ldi	r31, 0x16	; 22
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	aa 3d       	cpi	r26, 0xDA	; 218
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	aa ed       	ldi	r26, 0xDA	; 218
     19c:	b0 e0       	ldi	r27, 0x00	; 0
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	ab 3f       	cpi	r26, 0xFB	; 251
     1a4:	b2 07       	cpc	r27, r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	c4 d2       	rcall	.+1416   	; 0x732 <main>
     1aa:	8d ca       	rjmp	.-2790   	; 0xfffff6c6 <__eeprom_end+0xff7ef6c6>

000001ac <__bad_interrupt>:
     1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <__vector_9>:

	
}

ISR(USART_RX_vect)
{
     1ae:	1f 92       	push	r1
     1b0:	0f 92       	push	r0
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	0f 92       	push	r0
     1b6:	11 24       	eor	r1, r1
     1b8:	2f 93       	push	r18
     1ba:	3f 93       	push	r19
     1bc:	4f 93       	push	r20
     1be:	5f 93       	push	r21
     1c0:	6f 93       	push	r22
     1c2:	7f 93       	push	r23
     1c4:	8f 93       	push	r24
     1c6:	9f 93       	push	r25
     1c8:	af 93       	push	r26
     1ca:	bf 93       	push	r27
     1cc:	ef 93       	push	r30
     1ce:	ff 93       	push	r31
	char received = UDR; // take in the Rx byte
     1d0:	8c b1       	in	r24, 0x0c	; 12
	
	if(received == 0x0D || received == 0x0A) // if Enter key
     1d2:	8d 30       	cpi	r24, 0x0D	; 13
     1d4:	11 f0       	breq	.+4      	; 0x1da <__vector_9+0x2c>
     1d6:	8a 30       	cpi	r24, 0x0A	; 10
     1d8:	99 f5       	brne	.+102    	; 0x240 <__DATA_REGION_LENGTH__+0x40>
	{
		if (uart_cnt > 0)
     1da:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end>
     1de:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__data_end+0x1>
     1e2:	89 2b       	or	r24, r25
     1e4:	41 f1       	breq	.+80     	; 0x236 <__DATA_REGION_LENGTH__+0x36>
		{
			uart_buff[uart_head] = 0x00; // Null-terminate string
     1e6:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <uart_head>
     1ea:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <uart_head+0x1>
     1ee:	e2 51       	subi	r30, 0x12	; 18
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	10 82       	st	Z, r1
			uart_tail = (uart_head + BT_BUFF - uart_cnt) % BT_BUFF; // Start of the message
     1f4:	40 91 de 00 	lds	r20, 0x00DE	; 0x8000de <uart_head>
     1f8:	50 91 df 00 	lds	r21, 0x00DF	; 0x8000df <uart_head+0x1>
     1fc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end>
     200:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__data_end+0x1>
     204:	48 1b       	sub	r20, r24
     206:	59 0b       	sbc	r21, r25
     208:	43 5f       	subi	r20, 0xF3	; 243
     20a:	5f 4f       	sbci	r21, 0xFF	; 255
     20c:	9a 01       	movw	r18, r20
     20e:	a5 ec       	ldi	r26, 0xC5	; 197
     210:	be e4       	ldi	r27, 0x4E	; 78
     212:	c8 d7       	rcall	.+3984   	; 0x11a4 <__umulhisi3>
     214:	96 95       	lsr	r25
     216:	87 95       	ror	r24
     218:	96 95       	lsr	r25
     21a:	87 95       	ror	r24
     21c:	6d e0       	ldi	r22, 0x0D	; 13
     21e:	68 9f       	mul	r22, r24
     220:	90 01       	movw	r18, r0
     222:	69 9f       	mul	r22, r25
     224:	30 0d       	add	r19, r0
     226:	11 24       	eor	r1, r1
     228:	ca 01       	movw	r24, r20
     22a:	82 1b       	sub	r24, r18
     22c:	93 0b       	sbc	r25, r19
     22e:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <uart_tail+0x1>
     232:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <uart_tail>
		}
		uart_cnt = 0;
     236:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__data_end+0x1>
     23a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__data_end>
		return;
     23e:	4d c0       	rjmp	.+154    	; 0x2da <__stack+0x7b>
	}
	
	uart_buff[uart_head] = received;
     240:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <uart_head>
     244:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <uart_head+0x1>
     248:	e2 51       	subi	r30, 0x12	; 18
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	80 83       	st	Z, r24
	uart_head = (uart_head + 1) % BT_BUFF;
     24e:	40 91 de 00 	lds	r20, 0x00DE	; 0x8000de <uart_head>
     252:	50 91 df 00 	lds	r21, 0x00DF	; 0x8000df <uart_head+0x1>
     256:	4f 5f       	subi	r20, 0xFF	; 255
     258:	5f 4f       	sbci	r21, 0xFF	; 255
     25a:	9a 01       	movw	r18, r20
     25c:	a5 ec       	ldi	r26, 0xC5	; 197
     25e:	be e4       	ldi	r27, 0x4E	; 78
     260:	a1 d7       	rcall	.+3906   	; 0x11a4 <__umulhisi3>
     262:	96 95       	lsr	r25
     264:	87 95       	ror	r24
     266:	96 95       	lsr	r25
     268:	87 95       	ror	r24
     26a:	6d e0       	ldi	r22, 0x0D	; 13
     26c:	68 9f       	mul	r22, r24
     26e:	90 01       	movw	r18, r0
     270:	69 9f       	mul	r22, r25
     272:	30 0d       	add	r19, r0
     274:	11 24       	eor	r1, r1
     276:	ca 01       	movw	r24, r20
     278:	82 1b       	sub	r24, r18
     27a:	93 0b       	sbc	r25, r19
     27c:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <uart_head+0x1>
     280:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <uart_head>

	if(uart_cnt < BT_BUFF)
     284:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end>
     288:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__data_end+0x1>
     28c:	0d 97       	sbiw	r24, 0x0d	; 13
     28e:	50 f4       	brcc	.+20     	; 0x2a4 <__stack+0x45>
	{
		uart_cnt++;
     290:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end>
     294:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__data_end+0x1>
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <__data_end+0x1>
     29e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__data_end>
     2a2:	1b c0       	rjmp	.+54     	; 0x2da <__stack+0x7b>
	}
	else
	{
		uart_tail = (uart_tail + 1) % BT_BUFF; // Overwrite oldest
     2a4:	40 91 dc 00 	lds	r20, 0x00DC	; 0x8000dc <uart_tail>
     2a8:	50 91 dd 00 	lds	r21, 0x00DD	; 0x8000dd <uart_tail+0x1>
     2ac:	4f 5f       	subi	r20, 0xFF	; 255
     2ae:	5f 4f       	sbci	r21, 0xFF	; 255
     2b0:	9a 01       	movw	r18, r20
     2b2:	a5 ec       	ldi	r26, 0xC5	; 197
     2b4:	be e4       	ldi	r27, 0x4E	; 78
     2b6:	76 d7       	rcall	.+3820   	; 0x11a4 <__umulhisi3>
     2b8:	96 95       	lsr	r25
     2ba:	87 95       	ror	r24
     2bc:	96 95       	lsr	r25
     2be:	87 95       	ror	r24
     2c0:	6d e0       	ldi	r22, 0x0D	; 13
     2c2:	68 9f       	mul	r22, r24
     2c4:	90 01       	movw	r18, r0
     2c6:	69 9f       	mul	r22, r25
     2c8:	30 0d       	add	r19, r0
     2ca:	11 24       	eor	r1, r1
     2cc:	ca 01       	movw	r24, r20
     2ce:	82 1b       	sub	r24, r18
     2d0:	93 0b       	sbc	r25, r19
     2d2:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <uart_tail+0x1>
     2d6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <uart_tail>
	}
}
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <__vector_1>:
ISR(INT0_vect)
{
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	4f 93       	push	r20
     308:	5f 93       	push	r21
     30a:	6f 93       	push	r22
     30c:	7f 93       	push	r23
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
     312:	af 93       	push	r26
     314:	bf 93       	push	r27
	if( last_edge == 0)
     316:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <last_edge>
     31a:	81 11       	cpse	r24, r1
     31c:	10 c0       	rjmp	.+32     	; 0x33e <__vector_1+0x42>
	{
		//first edge detected
		rise1_clks = TCNT1; //Timer counter value gets put in
     31e:	8c b5       	in	r24, 0x2c	; 44
     320:	9d b5       	in	r25, 0x2d	; 45
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <rise1_clks>
     32a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <rise1_clks+0x1>
     32e:	a0 93 ec 00 	sts	0x00EC, r26	; 0x8000ec <rise1_clks+0x2>
     332:	b0 93 ed 00 	sts	0x00ED, r27	; 0x8000ed <rise1_clks+0x3>
		last_edge = 1;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <last_edge>
     33c:	55 c0       	rjmp	.+170    	; 0x3e8 <__vector_1+0xec>
	}
	else
	{
		//second edge detected 
		rise2_clks = TCNT1; //timer counter value gets put in
     33e:	8c b5       	in	r24, 0x2c	; 44
     340:	9d b5       	in	r25, 0x2d	; 45
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <rise2_clks>
     34a:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <rise2_clks+0x1>
     34e:	a0 93 e8 00 	sts	0x00E8, r26	; 0x8000e8 <rise2_clks+0x2>
     352:	b0 93 e9 00 	sts	0x00E9, r27	; 0x8000e9 <rise2_clks+0x3>
		last_edge = 0; //we got our second edge so reset it back again
     356:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <last_edge>
		
		if(rise2_clks < rise1_clks)
     35a:	40 91 e6 00 	lds	r20, 0x00E6	; 0x8000e6 <rise2_clks>
     35e:	50 91 e7 00 	lds	r21, 0x00E7	; 0x8000e7 <rise2_clks+0x1>
     362:	60 91 e8 00 	lds	r22, 0x00E8	; 0x8000e8 <rise2_clks+0x2>
     366:	70 91 e9 00 	lds	r23, 0x00E9	; 0x8000e9 <rise2_clks+0x3>
     36a:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <rise1_clks>
     36e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <rise1_clks+0x1>
     372:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <rise1_clks+0x2>
     376:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <rise1_clks+0x3>
     37a:	48 17       	cp	r20, r24
     37c:	59 07       	cpc	r21, r25
     37e:	6a 07       	cpc	r22, r26
     380:	7b 07       	cpc	r23, r27
     382:	88 f4       	brcc	.+34     	; 0x3a6 <__vector_1+0xaa>
			rise2_clks += 65536; //account for overflow 
     384:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <rise2_clks>
     388:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <rise2_clks+0x1>
     38c:	a0 91 e8 00 	lds	r26, 0x00E8	; 0x8000e8 <rise2_clks+0x2>
     390:	b0 91 e9 00 	lds	r27, 0x00E9	; 0x8000e9 <rise2_clks+0x3>
     394:	11 96       	adiw	r26, 0x01	; 1
     396:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <rise2_clks>
     39a:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <rise2_clks+0x1>
     39e:	a0 93 e8 00 	sts	0x00E8, r26	; 0x8000e8 <rise2_clks+0x2>
     3a2:	b0 93 e9 00 	sts	0x00E9, r27	; 0x8000e9 <rise2_clks+0x3>
		
		clks = rise2_clks - rise1_clks;
     3a6:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <rise2_clks>
     3aa:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <rise2_clks+0x1>
     3ae:	a0 91 e8 00 	lds	r26, 0x00E8	; 0x8000e8 <rise2_clks+0x2>
     3b2:	b0 91 e9 00 	lds	r27, 0x00E9	; 0x8000e9 <rise2_clks+0x3>
     3b6:	40 91 ea 00 	lds	r20, 0x00EA	; 0x8000ea <rise1_clks>
     3ba:	50 91 eb 00 	lds	r21, 0x00EB	; 0x8000eb <rise1_clks+0x1>
     3be:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <rise1_clks+0x2>
     3c2:	70 91 ed 00 	lds	r23, 0x00ED	; 0x8000ed <rise1_clks+0x3>
     3c6:	84 1b       	sub	r24, r20
     3c8:	95 0b       	sbc	r25, r21
     3ca:	a6 0b       	sbc	r26, r22
     3cc:	b7 0b       	sbc	r27, r23
     3ce:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <clks>
     3d2:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <clks+0x1>
     3d6:	a0 93 e4 00 	sts	0x00E4, r26	; 0x8000e4 <clks+0x2>
     3da:	b0 93 e5 00 	sts	0x00E5, r27	; 0x8000e5 <clks+0x3>
		last_edge = 0;
     3de:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <last_edge>
		done = 1;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <done>
	}
}
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <init_timer>:

void init_timer()
{
	TCCR1B = 0x01; //no pre-scaling so counts on every clock cycle
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	8e bd       	out	0x2e, r24	; 46
     406:	08 95       	ret

00000408 <init_ints>:
}

void init_ints()
{
	DDRD = 0x00;
     408:	11 ba       	out	0x11, r1	; 17
	GICR = 0x40;
     40a:	80 e4       	ldi	r24, 0x40	; 64
     40c:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0x03;
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	85 bf       	out	0x35, r24	; 53
     412:	08 95       	ret

00000414 <UARTinit>:
}
void UARTinit(unsigned int ubrr)
{
	UBRRH = 0x00;
     414:	10 bc       	out	0x20, r1	; 32
	UBRRL = UBRR;
     416:	83 e3       	ldi	r24, 0x33	; 51
     418:	89 b9       	out	0x09, r24	; 9
	
	UCSRA = 0x02; //set U2X high for double
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	8b b9       	out	0x0b, r24	; 11
	UCSRB = 0x98; // enable Rx interrupt, Rx and Tx
     41e:	88 e9       	ldi	r24, 0x98	; 152
     420:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86;//8bit mode no parity 1 stop bit
     422:	86 e8       	ldi	r24, 0x86	; 134
     424:	80 bd       	out	0x20, r24	; 32
     426:	08 95       	ret

00000428 <UART_Tx>:
void UART_Tx(char data)
{
	do
	{
		
	}while (!(UCSRA & 0x20));//wait for empty buff
     428:	5d 9b       	sbis	0x0b, 5	; 11
     42a:	fe cf       	rjmp	.-4      	; 0x428 <UART_Tx>
	UDR = data;//put data in buff to be sent
     42c:	8c b9       	out	0x0c, r24	; 12
     42e:	08 95       	ret

00000430 <UARTstrTx>:
}

void UARTstrTx(char msg[])
{
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	8c 01       	movw	r16, r24
	int i=0;
     43a:	c0 e0       	ldi	r28, 0x00	; 0
     43c:	d0 e0       	ldi	r29, 0x00	; 0
	do 
	{
		UART_Tx(msg[i]);
     43e:	f8 01       	movw	r30, r16
     440:	ec 0f       	add	r30, r28
     442:	fd 1f       	adc	r31, r29
     444:	80 81       	ld	r24, Z
     446:	f0 df       	rcall	.-32     	; 0x428 <UART_Tx>
		i++;
     448:	21 96       	adiw	r28, 0x01	; 1
	} while ((i < LCD_MAX) && (msg[i-1] != 0x0A));
     44a:	c0 31       	cpi	r28, 0x10	; 16
     44c:	d1 05       	cpc	r29, r1
     44e:	3c f4       	brge	.+14     	; 0x45e <UARTstrTx+0x2e>
     450:	fe 01       	movw	r30, r28
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	e0 0f       	add	r30, r16
     456:	f1 1f       	adc	r31, r17
     458:	80 81       	ld	r24, Z
     45a:	8a 30       	cpi	r24, 0x0A	; 10
     45c:	81 f7       	brne	.-32     	; 0x43e <UARTstrTx+0xe>
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <printLCD>:
-First field takes text to be displayed on LCD with limit set by #define LCD_MAX.

-Second field takes char input but I setup defines to use them by name where they are setting
	the DDRAM address in the LCD to decide where the text will start writing. 
*/
{
     468:	9c 01       	movw	r18, r24
	char i = 0;
	
	if (line == LINE1)
     46a:	61 30       	cpi	r22, 0x01	; 1
     46c:	39 f4       	brne	.+14     	; 0x47c <printLCD+0x14>
	{
		PORTE = 0x0;	//Enable pin and Register Select to low
     46e:	17 b8       	out	0x07, r1	; 7
		PORTA = 0x80;	//DB7 must be high for DDRAM address select but rest low for first address
     470:	80 e8       	ldi	r24, 0x80	; 128
     472:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	87 b9       	out	0x07, r24	; 7
		PORTE = 0x0;	//bring Enable low again to create falling edge
     478:	17 b8       	out	0x07, r1	; 7
     47a:	2e c0       	rjmp	.+92     	; 0x4d8 <printLCD+0x70>
	}
	else if (line == LINE2)
     47c:	62 30       	cpi	r22, 0x02	; 2
     47e:	39 f4       	brne	.+14     	; 0x48e <printLCD+0x26>
	{
		PORTE = 0x0;	//Enable pin and Register Select to low
     480:	17 b8       	out	0x07, r1	; 7
		PORTA = 0xC0;	// DB7 must be high but rest is 0x40 for first second line address
     482:	80 ec       	ldi	r24, 0xC0	; 192
     484:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	87 b9       	out	0x07, r24	; 7
		PORTE = 0x0;	//bring Enable low again to create falling edge
     48a:	17 b8       	out	0x07, r1	; 7
     48c:	25 c0       	rjmp	.+74     	; 0x4d8 <printLCD+0x70>
	}
	else if (line == ADRSAME)
     48e:	66 23       	and	r22, r22
     490:	19 f1       	breq	.+70     	; 0x4d8 <printLCD+0x70>
	{
		//do nothing to maintain same address
	}
	else if (line == MIDLINE1)
     492:	63 30       	cpi	r22, 0x03	; 3
     494:	39 f4       	brne	.+14     	; 0x4a4 <printLCD+0x3c>
	{
		PORTE = 0x0;	//Enable pin and Register Select to low
     496:	17 b8       	out	0x07, r1	; 7
		PORTA = 0x87;	// DB7 must be high and rest is 0x07 for the 8th char space on line 1
     498:	87 e8       	ldi	r24, 0x87	; 135
     49a:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	87 b9       	out	0x07, r24	; 7
		PORTE = 0x0;	//bring Enable low again to create falling edge
     4a0:	17 b8       	out	0x07, r1	; 7
     4a2:	1a c0       	rjmp	.+52     	; 0x4d8 <printLCD+0x70>
	}
	else if (line == MIDLINE2)
     4a4:	64 30       	cpi	r22, 0x04	; 4
     4a6:	39 f4       	brne	.+14     	; 0x4b6 <printLCD+0x4e>
	{
		PORTE = 0x0;	//Enable pin and Register Select to low
     4a8:	17 b8       	out	0x07, r1	; 7
		PORTA = 0xC7;	// DB7 must be high and rest is 0x47 for the 8th char space on line 2
     4aa:	87 ec       	ldi	r24, 0xC7	; 199
     4ac:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	87 b9       	out	0x07, r24	; 7
		PORTE = 0x0;	//bring Enable low again to create falling edge
     4b2:	17 b8       	out	0x07, r1	; 7
     4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <printLCD+0x70>
	}
	else if (line == AFTRMID1)
     4b6:	65 30       	cpi	r22, 0x05	; 5
     4b8:	39 f4       	brne	.+14     	; 0x4c8 <printLCD+0x60>
	{
		PORTE = 0x0;	//Enable pin and Register Select to low
     4ba:	17 b8       	out	0x07, r1	; 7
		PORTA = 0x89;	// DB7 must be high and rest is 0x09 for the 10th char space on line 1
     4bc:	89 e8       	ldi	r24, 0x89	; 137
     4be:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	87 b9       	out	0x07, r24	; 7
		PORTE = 0x0;	//bring Enable low again to create falling edge
     4c4:	17 b8       	out	0x07, r1	; 7
     4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <printLCD+0x70>
	}
	else if (line == AFTRMID2)
     4c8:	66 30       	cpi	r22, 0x06	; 6
     4ca:	31 f4       	brne	.+12     	; 0x4d8 <printLCD+0x70>
	{
		PORTE = 0x0;	//Enable pin and Register Select to low
     4cc:	17 b8       	out	0x07, r1	; 7
		PORTA = 0xC9;	// DB7 must be high and rest is 0x09 for the 10th char space on line 2
     4ce:	89 ec       	ldi	r24, 0xC9	; 201
     4d0:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	87 b9       	out	0x07, r24	; 7
		PORTE = 0x0;	//bring Enable low again to create falling edge
     4d6:	17 b8       	out	0x07, r1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d8:	81 ed       	ldi	r24, 0xD1	; 209
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <printLCD+0x74>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <printLCD+0x7a>
     4e2:	00 00       	nop

-Second field takes char input but I setup defines to use them by name where they are setting
	the DDRAM address in the LCD to decide where the text will start writing. 
*/
{
	char i = 0;
     4e4:	90 e0       	ldi	r25, 0x00	; 0
	
	_delay_us(200);		//wait to avoid sending chars before LCD is ready
	
	do
	{
		PORTE = 0x1;	//Register select in data mode with Enable low
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	87 b9       	out	0x07, r24	; 7
		PORTA = msg[i];	//put the char of array at current count on PORTC
     4ea:	f9 01       	movw	r30, r18
     4ec:	e9 0f       	add	r30, r25
     4ee:	f1 1d       	adc	r31, r1
     4f0:	80 81       	ld	r24, Z
     4f2:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0x3;	//pull Enable high for to setup for falling edge
     4f4:	83 e0       	ldi	r24, 0x03	; 3
     4f6:	87 b9       	out	0x07, r24	; 7
		PORTE = 0x0;	// create falling edge to make LCD take in PORTC 
     4f8:	17 b8       	out	0x07, r1	; 7
     4fa:	84 e3       	ldi	r24, 0x34	; 52
     4fc:	8a 95       	dec	r24
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <printLCD+0x94>
		_delay_us(37);
		
		i++;
     500:	9f 5f       	subi	r25, 0xFF	; 255
	}while((msg[i] != 0x00) && (i < LCD_MAX) );
     502:	f9 01       	movw	r30, r18
     504:	e9 0f       	add	r30, r25
     506:	f1 1d       	adc	r31, r1
     508:	80 81       	ld	r24, Z
     50a:	88 23       	and	r24, r24
     50c:	11 f0       	breq	.+4      	; 0x512 <printLCD+0xaa>
     50e:	90 31       	cpi	r25, 0x10	; 16
     510:	50 f3       	brcs	.-44     	; 0x4e6 <printLCD+0x7e>
     512:	08 95       	ret

00000514 <BarLCD>:
		i++;
	} while ((i < LCD_MAX) && (msg[i-1] != 0x0A));
}

void BarLCD(int numbar)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec 01       	movw	r28, r24
	char i = 0;
	
	if (numbar < 0)
     51a:	99 23       	and	r25, r25
     51c:	b4 f5       	brge	.+108    	; 0x58a <BarLCD+0x76>
	{//if negative bar goes to the left
		
		printLCD("       ",AFTRMID2);
     51e:	66 e0       	ldi	r22, 0x06	; 6
     520:	8c ec       	ldi	r24, 0xCC	; 204
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a1 df       	rcall	.-190    	; 0x468 <printLCD>
		
		numbar = numbar + 7;
     526:	27 96       	adiw	r28, 0x07	; 7
		
		PORTE = 0x0;	//Enable pin and Register Select to low
     528:	17 b8       	out	0x07, r1	; 7
		PORTA = 0xC0;	
     52a:	80 ec       	ldi	r24, 0xC0	; 192
     52c:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	87 b9       	out	0x07, r24	; 7
		PORTE = 0x0;	//bring Enable low again to create falling edge
     532:	17 b8       	out	0x07, r1	; 7
     534:	86 ee       	ldi	r24, 0xE6	; 230
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <BarLCD+0x24>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <BarLCD+0x2a>
     53e:	00 00       	nop
	} while ((i < LCD_MAX) && (msg[i-1] != 0x0A));
}

void BarLCD(int numbar)
{
	char i = 0;
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0b c0       	rjmp	.+22     	; 0x55a <BarLCD+0x46>
		
		_delay_us(220);		//wait to avoid sending chars before LCD is ready
		
		while ( (i < numbar) && (i < BARS) && (numbar != 0) )
		{
			PORTE = 0x1;	//Register select in data mode with Enable low
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	97 b9       	out	0x07, r25	; 7
			PORTA = ' ';	
     548:	90 e2       	ldi	r25, 0x20	; 32
     54a:	9b bb       	out	0x1b, r25	; 27
			PORTE = 0x3;	//pull Enable high for to setup for falling edge
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	97 b9       	out	0x07, r25	; 7
			PORTE = 0x0;	// create falling edge to make LCD take in PORTC
     550:	17 b8       	out	0x07, r1	; 7
     552:	94 e3       	ldi	r25, 0x34	; 52
     554:	9a 95       	dec	r25
     556:	f1 f7       	brne	.-4      	; 0x554 <BarLCD+0x40>
			_delay_us(37);
			i++;
     558:	8f 5f       	subi	r24, 0xFF	; 255
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
		PORTE = 0x0;	//bring Enable low again to create falling edge
		
		_delay_us(220);		//wait to avoid sending chars before LCD is ready
		
		while ( (i < numbar) && (i < BARS) && (numbar != 0) )
     55a:	28 2f       	mov	r18, r24
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	2c 17       	cp	r18, r28
     560:	3d 07       	cpc	r19, r29
     562:	84 f4       	brge	.+32     	; 0x584 <BarLCD+0x70>
     564:	87 30       	cpi	r24, 0x07	; 7
     566:	70 f4       	brcc	.+28     	; 0x584 <BarLCD+0x70>
     568:	20 97       	sbiw	r28, 0x00	; 0
     56a:	61 f7       	brne	.-40     	; 0x544 <BarLCD+0x30>
     56c:	0b c0       	rjmp	.+22     	; 0x584 <BarLCD+0x70>
			i++;
		}
		
		while ( (i < BARS) )//emptying out the rest of the line
		{
			PORTE = 0x1;	//Register select in data mode with Enable low
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	97 b9       	out	0x07, r25	; 7
			PORTA = 0xFF;	
     572:	9f ef       	ldi	r25, 0xFF	; 255
     574:	9b bb       	out	0x1b, r25	; 27
			PORTE = 0x3;	//pull Enable high for to setup for falling edge
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	97 b9       	out	0x07, r25	; 7
			PORTE = 0x0;	// create falling edge to make LCD take in PORTC
     57a:	17 b8       	out	0x07, r1	; 7
     57c:	94 e3       	ldi	r25, 0x34	; 52
     57e:	9a 95       	dec	r25
     580:	f1 f7       	brne	.-4      	; 0x57e <BarLCD+0x6a>
			_delay_us(37);
			i++;
     582:	8f 5f       	subi	r24, 0xFF	; 255
			PORTE = 0x0;	// create falling edge to make LCD take in PORTC
			_delay_us(37);
			i++;
		}
		
		while ( (i < BARS) )//emptying out the rest of the line
     584:	87 30       	cpi	r24, 0x07	; 7
     586:	98 f3       	brcs	.-26     	; 0x56e <BarLCD+0x5a>
     588:	44 c0       	rjmp	.+136    	; 0x612 <BarLCD+0xfe>
			_delay_us(37);
			i++;
		}
		
	}
	else if( numbar == 0 )
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	49 f4       	brne	.+18     	; 0x5a0 <BarLCD+0x8c>
	{
		printLCD("       ",AFTRMID2);
     58e:	66 e0       	ldi	r22, 0x06	; 6
     590:	8c ec       	ldi	r24, 0xCC	; 204
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	69 df       	rcall	.-302    	; 0x468 <printLCD>
		printLCD("       ",LINE2);
     596:	62 e0       	ldi	r22, 0x02	; 2
     598:	8c ec       	ldi	r24, 0xCC	; 204
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	65 df       	rcall	.-310    	; 0x468 <printLCD>
     59e:	39 c0       	rjmp	.+114    	; 0x612 <BarLCD+0xfe>
	}
	else if( numbar > 0 )
     5a0:	18 16       	cp	r1, r24
     5a2:	19 06       	cpc	r1, r25
     5a4:	b4 f5       	brge	.+108    	; 0x612 <BarLCD+0xfe>
	{//if positive, bar goes to the right
		printLCD("       ",LINE2);
     5a6:	62 e0       	ldi	r22, 0x02	; 2
     5a8:	8c ec       	ldi	r24, 0xCC	; 204
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	5d df       	rcall	.-326    	; 0x468 <printLCD>
		
		PORTE = 0x0;	//Enable pin and Register Select to low
     5ae:	17 b8       	out	0x07, r1	; 7
		PORTA = 0xC9;	// DB7 must be high and rest is 0x09 for the 10th char space on line 2
     5b0:	89 ec       	ldi	r24, 0xC9	; 201
     5b2:	8b bb       	out	0x1b, r24	; 27
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	87 b9       	out	0x07, r24	; 7
		PORTE = 0x0;	//bring Enable low again to create falling edge
     5b8:	17 b8       	out	0x07, r1	; 7
     5ba:	86 ee       	ldi	r24, 0xE6	; 230
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <BarLCD+0xaa>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <BarLCD+0xb0>
     5c4:	00 00       	nop
	} while ((i < LCD_MAX) && (msg[i-1] != 0x0A));
}

void BarLCD(int numbar)
{
	char i = 0;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0b c0       	rjmp	.+22     	; 0x5e0 <BarLCD+0xcc>
		
		_delay_us(220);		//wait to avoid sending chars before LCD is ready
	
		while ( (i < numbar) && (i < BARS) && (numbar != 0) ) 
		{
			PORTE = 0x1;	//Register select in data mode with Enable low
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	97 b9       	out	0x07, r25	; 7
			PORTA = 0xFF;	//Put bar character on PORTC
     5ce:	9f ef       	ldi	r25, 0xFF	; 255
     5d0:	9b bb       	out	0x1b, r25	; 27
			PORTE = 0x3;	//pull Enable high for to setup for falling edge
     5d2:	93 e0       	ldi	r25, 0x03	; 3
     5d4:	97 b9       	out	0x07, r25	; 7
			PORTE = 0x0;	// create falling edge to make LCD take in PORTC
     5d6:	17 b8       	out	0x07, r1	; 7
     5d8:	94 e3       	ldi	r25, 0x34	; 52
     5da:	9a 95       	dec	r25
     5dc:	f1 f7       	brne	.-4      	; 0x5da <BarLCD+0xc6>
			_delay_us(37);
			i++;
     5de:	8f 5f       	subi	r24, 0xFF	; 255
		PORTE = 0x2;	//pull Enable high to setup for falling edge for Enable to trigger on PORTC output
		PORTE = 0x0;	//bring Enable low again to create falling edge
		
		_delay_us(220);		//wait to avoid sending chars before LCD is ready
	
		while ( (i < numbar) && (i < BARS) && (numbar != 0) ) 
     5e0:	28 2f       	mov	r18, r24
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	2c 17       	cp	r18, r28
     5e6:	3d 07       	cpc	r19, r29
     5e8:	84 f4       	brge	.+32     	; 0x60a <BarLCD+0xf6>
     5ea:	87 30       	cpi	r24, 0x07	; 7
     5ec:	70 f4       	brcc	.+28     	; 0x60a <BarLCD+0xf6>
     5ee:	20 97       	sbiw	r28, 0x00	; 0
     5f0:	61 f7       	brne	.-40     	; 0x5ca <BarLCD+0xb6>
     5f2:	0b c0       	rjmp	.+22     	; 0x60a <BarLCD+0xf6>
			i++;
		}
	
		while ( (i < BARS) && (numbar != 0) )//emptying out the rest of the line
		{
			PORTE = 0x1;	//Register select in data mode with Enable low
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	97 b9       	out	0x07, r25	; 7
			PORTA = ' ';	//Put SPACE on PORTC
     5f8:	90 e2       	ldi	r25, 0x20	; 32
     5fa:	9b bb       	out	0x1b, r25	; 27
			PORTE = 0x3;	//pull Enable high for to setup for falling edge
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	97 b9       	out	0x07, r25	; 7
			PORTE = 0x0;	// create falling edge to make LCD take in PORTC
     600:	17 b8       	out	0x07, r1	; 7
     602:	94 e3       	ldi	r25, 0x34	; 52
     604:	9a 95       	dec	r25
     606:	f1 f7       	brne	.-4      	; 0x604 <BarLCD+0xf0>
			_delay_us(37);
			i++;
     608:	8f 5f       	subi	r24, 0xFF	; 255
			PORTE = 0x0;	// create falling edge to make LCD take in PORTC
			_delay_us(37);
			i++;
		}
	
		while ( (i < BARS) && (numbar != 0) )//emptying out the rest of the line
     60a:	87 30       	cpi	r24, 0x07	; 7
     60c:	10 f4       	brcc	.+4      	; 0x612 <BarLCD+0xfe>
     60e:	20 97       	sbiw	r28, 0x00	; 0
     610:	89 f7       	brne	.-30     	; 0x5f4 <BarLCD+0xe0>
			PORTE = 0x0;	// create falling edge to make LCD take in PORTC
			_delay_us(37);
			i++;
		}
	}
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <funcset8bit>:
	entryModeSet(INCREMENT);	// cursor moves right, no shifting
}

void funcset8bit()
{
	PORTE = 0x0;
     618:	17 b8       	out	0x07, r1	; 7
	PORTA = 0x38;
     61a:	88 e3       	ldi	r24, 0x38	; 56
     61c:	8b bb       	out	0x1b, r24	; 27
	PORTE = 0x2;
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	87 b9       	out	0x07, r24	; 7
	PORTE = 0x0;
     622:	17 b8       	out	0x07, r1	; 7
     624:	84 e3       	ldi	r24, 0x34	; 52
     626:	8a 95       	dec	r24
     628:	f1 f7       	brne	.-4      	; 0x626 <funcset8bit+0xe>
     62a:	08 95       	ret

0000062c <displayON>:
	_delay_us(37);
}
void displayON()
{
	PORTE = 0x0;
     62c:	17 b8       	out	0x07, r1	; 7
	PORTA = 0x0C;
     62e:	8c e0       	ldi	r24, 0x0C	; 12
     630:	8b bb       	out	0x1b, r24	; 27
	PORTE = 0x2;
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	87 b9       	out	0x07, r24	; 7
	PORTE = 0x0;
     636:	17 b8       	out	0x07, r1	; 7
     638:	84 e3       	ldi	r24, 0x34	; 52
     63a:	8a 95       	dec	r24
     63c:	f1 f7       	brne	.-4      	; 0x63a <displayON+0xe>
     63e:	08 95       	ret

00000640 <clearLCD>:
	_delay_us(37);
}
void clearLCD()
{
	PORTE = 0x0;
     640:	17 b8       	out	0x07, r1	; 7
	PORTA = 0x01;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	8b bb       	out	0x1b, r24	; 27
	PORTE = 0x2;
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	87 b9       	out	0x07, r24	; 7
	PORTE = 0x0;
     64a:	17 b8       	out	0x07, r1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64c:	8a e3       	ldi	r24, 0x3A	; 58
     64e:	96 e0       	ldi	r25, 0x06	; 6
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <clearLCD+0x10>
     654:	00 c0       	rjmp	.+0      	; 0x656 <clearLCD+0x16>
     656:	00 00       	nop
     658:	08 95       	ret

0000065a <entryModeSet>:
	_delay_ms(1.52);
}
void entryModeSet(char dir)
{
	PORTE = 0x0;
     65a:	17 b8       	out	0x07, r1	; 7
	PORTA = dir;
     65c:	8b bb       	out	0x1b, r24	; 27
	PORTE = 0x2;
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	87 b9       	out	0x07, r24	; 7
	PORTE = 0x0;
     662:	17 b8       	out	0x07, r1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     664:	84 e3       	ldi	r24, 0x34	; 52
     666:	8a 95       	dec	r24
     668:	f1 f7       	brne	.-4      	; 0x666 <entryModeSet+0xc>
     66a:	08 95       	ret

0000066c <initLCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66c:	81 ef       	ldi	r24, 0xF1	; 241
     66e:	93 ea       	ldi	r25, 0xA3	; 163
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <initLCD+0x4>
     674:	00 c0       	rjmp	.+0      	; 0x676 <initLCD+0xa>
     676:	00 00       	nop
p.24 Sitronix ST7066U Dot Matrix LCD Controller/Driver datasheet
*/
void initLCD()
{
	_delay_ms(40);	// LCD needs 40ms after power up
	funcset8bit();	// 8bit mode 2 lines and 5x8 font size
     678:	cf df       	rcall	.-98     	; 0x618 <funcset8bit>
	funcset8bit();
     67a:	ce df       	rcall	.-100    	; 0x618 <funcset8bit>
	displayON();	// entire display on, cursor on, cursor position on
     67c:	d7 df       	rcall	.-82     	; 0x62c <displayON>
	clearLCD();		// clear all chars on display
     67e:	e0 df       	rcall	.-64     	; 0x640 <clearLCD>
	entryModeSet(INCREMENT);	// cursor moves right, no shifting
     680:	86 e0       	ldi	r24, 0x06	; 6
     682:	eb df       	rcall	.-42     	; 0x65a <entryModeSet>
     684:	08 95       	ret

00000686 <float2str2UART>:
	PORTE = 0x2;
	PORTE = 0x0;
	_delay_us(37);
}
void float2str2UART(double val)
{
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	2a 97       	sbiw	r28, 0x0a	; 10
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
	//to convert double to str to send over uart to Pi	
	int i=0;
	char str[10];
	dtostrf(val,4,2,str); //put double value into a string of chars
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5f       	subi	r16, 0xFF	; 255
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	22 e0       	ldi	r18, 0x02	; 2
     6a6:	44 e0       	ldi	r20, 0x04	; 4
     6a8:	89 d5       	rcall	.+2834   	; 0x11bc <dtostrf>
	for(i=0;i<10;i++)
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	12 c0       	rjmp	.+36     	; 0x6d4 <float2str2UART+0x4e>
	{
		if( str[i] == 0x00 )
     6b0:	e1 e0       	ldi	r30, 0x01	; 1
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	ec 0f       	add	r30, r28
     6b6:	fd 1f       	adc	r31, r29
     6b8:	e8 0f       	add	r30, r24
     6ba:	f9 1f       	adc	r31, r25
     6bc:	20 81       	ld	r18, Z
     6be:	21 11       	cpse	r18, r1
     6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <float2str2UART+0x4c>
			str[i] =0x0A;
     6c2:	e1 e0       	ldi	r30, 0x01	; 1
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	ec 0f       	add	r30, r28
     6c8:	fd 1f       	adc	r31, r29
     6ca:	e8 0f       	add	r30, r24
     6cc:	f9 1f       	adc	r31, r25
     6ce:	2a e0       	ldi	r18, 0x0A	; 10
     6d0:	20 83       	st	Z, r18
{
	//to convert double to str to send over uart to Pi	
	int i=0;
	char str[10];
	dtostrf(val,4,2,str); //put double value into a string of chars
	for(i=0;i<10;i++)
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	8a 30       	cpi	r24, 0x0A	; 10
     6d6:	91 05       	cpc	r25, r1
     6d8:	5c f3       	brlt	.-42     	; 0x6b0 <float2str2UART+0x2a>
	{
		if( str[i] == 0x00 )
			str[i] =0x0A;
	}
	UARTstrTx(str);
     6da:	ce 01       	movw	r24, r28
     6dc:	01 96       	adiw	r24, 0x01	; 1
     6de:	a8 de       	rcall	.-688    	; 0x430 <UARTstrTx>
}
     6e0:	2a 96       	adiw	r28, 0x0a	; 10
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	08 95       	ret

000006f6 <freqcalc>:
unsigned long freqcalc()
{
	unsigned long i=0;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	dc 01       	movw	r26, r24
     6fc:	e9 e1       	ldi	r30, 0x19	; 25
     6fe:	f4 e0       	ldi	r31, 0x04	; 4
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <freqcalc+0xa>
	 
	//sei();
	do 
	{
		_delay_ms(1);
		i++;
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	a1 1d       	adc	r26, r1
     708:	b1 1d       	adc	r27, r1
	} while ( (done != 1) && (i < 25) );
     70a:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <done>
     70e:	21 30       	cpi	r18, 0x01	; 1
     710:	29 f0       	breq	.+10     	; 0x71c <freqcalc+0x26>
     712:	89 31       	cpi	r24, 0x19	; 25
     714:	91 05       	cpc	r25, r1
     716:	a1 05       	cpc	r26, r1
     718:	b1 05       	cpc	r27, r1
     71a:	80 f3       	brcs	.-32     	; 0x6fc <freqcalc+0x6>
	//cli();
	done = 0;
     71c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <done>
	
	return clks;
     720:	60 91 e2 00 	lds	r22, 0x00E2	; 0x8000e2 <clks>
     724:	70 91 e3 00 	lds	r23, 0x00E3	; 0x8000e3 <clks+0x1>
     728:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <clks+0x2>
     72c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <clks+0x3>
     730:	08 95       	ret

00000732 <main>:
void UARTinit(unsigned int);
void UART_Tx(char);
void UARTstrTx(char []);

int main(void)
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	c1 52       	subi	r28, 0x21	; 33
     73c:	d1 40       	sbci	r29, 0x01	; 1
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
	int stable = 0;
	double period = (double)1/F_CPU;
	double lastsent = 0.0;
	double freq = 0.0;
	unsigned long cnt=0;
	unsigned long clk_buff[BUFF_SIZE] = {0};
     748:	fe 01       	movw	r30, r28
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	88 e2       	ldi	r24, 0x28	; 40
     74e:	df 01       	movw	r26, r30
     750:	1d 92       	st	X+, r1
     752:	8a 95       	dec	r24
     754:	e9 f7       	brne	.-6      	; 0x750 <main+0x1e>
	int i=0,u=0;
	int notediff = 0;
	char uart_buff_cp[BT_BUFF];
	for(i=0;i<BT_BUFF;i++)
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0c c0       	rjmp	.+24     	; 0x774 <main+0x42>
	{
		uart_buff_cp[i] = 0;
     75c:	e9 e2       	ldi	r30, 0x29	; 41
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	ec 0f       	add	r30, r28
     762:	fd 1f       	adc	r31, r29
     764:	e8 0f       	add	r30, r24
     766:	f9 1f       	adc	r31, r25
     768:	10 82       	st	Z, r1
		uart_buff[i] = 0;
     76a:	fc 01       	movw	r30, r24
     76c:	e2 51       	subi	r30, 0x12	; 18
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	10 82       	st	Z, r1
	unsigned long cnt=0;
	unsigned long clk_buff[BUFF_SIZE] = {0};
	int i=0,u=0;
	int notediff = 0;
	char uart_buff_cp[BT_BUFF];
	for(i=0;i<BT_BUFF;i++)
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	8d 30       	cpi	r24, 0x0D	; 13
     776:	91 05       	cpc	r25, r1
     778:	8c f3       	brlt	.-30     	; 0x75c <main+0x2a>
		uart_buff_cp[i] = 0;
		uart_buff[i] = 0;
	}
	
	
	char notesltr[12][3] = {
     77a:	84 e2       	ldi	r24, 0x24	; 36
     77c:	e0 e6       	ldi	r30, 0x60	; 96
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	de 01       	movw	r26, r28
     782:	d6 96       	adiw	r26, 0x36	; 54
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	8a 95       	dec	r24
     78a:	e1 f7       	brne	.-8      	; 0x784 <main+0x52>
		'G','#',NULL,
		'A',' ',NULL,
		'A','#',NULL,
		'B',' ',NULL
						};
	float notesfreq[12] = { 
     78c:	80 e3       	ldi	r24, 0x30	; 48
     78e:	e4 e8       	ldi	r30, 0x84	; 132
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	de 01       	movw	r26, r28
     794:	a6 5a       	subi	r26, 0xA6	; 166
     796:	bf 4f       	sbci	r27, 0xFF	; 255
     798:	01 90       	ld	r0, Z+
     79a:	0d 92       	st	X+, r0
     79c:	8a 95       	dec	r24
     79e:	e1 f7       	brne	.-8      	; 0x798 <main+0x66>
	unsigned long delta;//to store difference between current freq and note freqs
	unsigned long small=65000;//to store smallest delta so far
	int ib=0,ub=0;// to store best i and u so far to know where in the array it is.
	unsigned long noteclks[12][3];
	
	for( u = 0; u < 3; u++ )
     7a0:	e1 2c       	mov	r14, r1
     7a2:	f1 2c       	mov	r15, r1
     7a4:	48 c0       	rjmp	.+144    	; 0x836 <main+0x104>
	{
		for( i = 0; i < 12; i++ )
		{
			noteclks[i][u] = (unsigned long)(F_CPU/(notesfreq[i]*(1<<u)));
     7a6:	f8 01       	movw	r30, r16
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	2a e5       	ldi	r18, 0x5A	; 90
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	2c 0f       	add	r18, r28
     7b6:	3d 1f       	adc	r19, r29
     7b8:	e2 0f       	add	r30, r18
     7ba:	f3 1f       	adc	r31, r19
     7bc:	80 80       	ld	r8, Z
     7be:	91 80       	ldd	r9, Z+1	; 0x01
     7c0:	a2 80       	ldd	r10, Z+2	; 0x02
     7c2:	b3 80       	ldd	r11, Z+3	; 0x03
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	0e 2c       	mov	r0, r14
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <main+0x9e>
     7cc:	66 0f       	add	r22, r22
     7ce:	77 1f       	adc	r23, r23
     7d0:	0a 94       	dec	r0
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <main+0x9a>
     7d4:	07 2e       	mov	r0, r23
     7d6:	00 0c       	add	r0, r0
     7d8:	88 0b       	sbc	r24, r24
     7da:	99 0b       	sbc	r25, r25
     7dc:	02 d3       	rcall	.+1540   	; 0xde2 <__floatsisf>
     7de:	a5 01       	movw	r20, r10
     7e0:	94 01       	movw	r18, r8
     7e2:	04 d4       	rcall	.+2056   	; 0xfec <__mulsf3>
     7e4:	9b 01       	movw	r18, r22
     7e6:	ac 01       	movw	r20, r24
     7e8:	60 e1       	ldi	r22, 0x10	; 16
     7ea:	75 e1       	ldi	r23, 0x15	; 21
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	9a e4       	ldi	r25, 0x4A	; 74
     7f0:	62 d2       	rcall	.+1220   	; 0xcb6 <__divsf3>
     7f2:	c9 d2       	rcall	.+1426   	; 0xd86 <__fixunssfsi>
     7f4:	f8 01       	movw	r30, r16
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	e0 0f       	add	r30, r16
     7fc:	f1 1f       	adc	r31, r17
     7fe:	ee 0d       	add	r30, r14
     800:	ff 1d       	adc	r31, r15
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	aa e8       	ldi	r26, 0x8A	; 138
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	ac 0f       	add	r26, r28
     810:	bd 1f       	adc	r27, r29
     812:	ea 0f       	add	r30, r26
     814:	fb 1f       	adc	r31, r27
     816:	60 83       	st	Z, r22
     818:	71 83       	std	Z+1, r23	; 0x01
     81a:	82 83       	std	Z+2, r24	; 0x02
     81c:	93 83       	std	Z+3, r25	; 0x03
	int ib=0,ub=0;// to store best i and u so far to know where in the array it is.
	unsigned long noteclks[12][3];
	
	for( u = 0; u < 3; u++ )
	{
		for( i = 0; i < 12; i++ )
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	02 c0       	rjmp	.+4      	; 0x828 <main+0xf6>
     824:	00 e0       	ldi	r16, 0x00	; 0
     826:	10 e0       	ldi	r17, 0x00	; 0
     828:	0c 30       	cpi	r16, 0x0C	; 12
     82a:	11 05       	cpc	r17, r1
     82c:	0c f4       	brge	.+2      	; 0x830 <main+0xfe>
     82e:	bb cf       	rjmp	.-138    	; 0x7a6 <main+0x74>
	unsigned long delta;//to store difference between current freq and note freqs
	unsigned long small=65000;//to store smallest delta so far
	int ib=0,ub=0;// to store best i and u so far to know where in the array it is.
	unsigned long noteclks[12][3];
	
	for( u = 0; u < 3; u++ )
     830:	bf ef       	ldi	r27, 0xFF	; 255
     832:	eb 1a       	sub	r14, r27
     834:	fb 0a       	sbc	r15, r27
     836:	23 e0       	ldi	r18, 0x03	; 3
     838:	e2 16       	cp	r14, r18
     83a:	f1 04       	cpc	r15, r1
     83c:	9c f3       	brlt	.-26     	; 0x824 <main+0xf2>
		{
			noteclks[i][u] = (unsigned long)(F_CPU/(notesfreq[i]*(1<<u)));
		}
	}
	
	DDRC = 0xFF;
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	84 bb       	out	0x14, r24	; 20
	DDRE = 0x3;
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	96 b9       	out	0x06, r25	; 6
	DDRA = 0xFF;
     846:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
     848:	1b ba       	out	0x1b, r1	; 27
	
	cli();
     84a:	f8 94       	cli
	
	init_ints();
     84c:	dd dd       	rcall	.-1094   	; 0x408 <init_ints>
	init_timer();
     84e:	d9 dd       	rcall	.-1102   	; 0x402 <init_timer>
	UARTinit(UBRR);
     850:	83 e3       	ldi	r24, 0x33	; 51
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	df dd       	rcall	.-1090   	; 0x414 <UARTinit>
	initLCD();
     856:	0a df       	rcall	.-492    	; 0x66c <initLCD>
	
	printLCD("Free Tune Mode",LINE1);
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	84 eb       	ldi	r24, 0xB4	; 180
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	04 de       	rcall	.-1016   	; 0x468 <printLCD>
	
	sei();
     860:	78 94       	sei
		123.47
						};

	unsigned long delta;//to store difference between current freq and note freqs
	unsigned long small=65000;//to store smallest delta so far
	int ib=0,ub=0;// to store best i and u so far to know where in the array it is.
     862:	61 2c       	mov	r6, r1
     864:	71 2c       	mov	r7, r1
     866:	00 e0       	ldi	r16, 0x00	; 0
     868:	10 e0       	ldi	r17, 0x00	; 0
{
	unsigned int uart_buff_index = 0;
	unsigned int buff_index=0;
	int stable = 0;
	double period = (double)1/F_CPU;
	double lastsent = 0.0;
     86a:	c2 5e       	subi	r28, 0xE2	; 226
     86c:	de 4f       	sbci	r29, 0xFE	; 254
     86e:	18 82       	st	Y, r1
     870:	ce 51       	subi	r28, 0x1E	; 30
     872:	d1 40       	sbci	r29, 0x01	; 1
     874:	c1 5e       	subi	r28, 0xE1	; 225
     876:	de 4f       	sbci	r29, 0xFE	; 254
     878:	18 82       	st	Y, r1
     87a:	cf 51       	subi	r28, 0x1F	; 31
     87c:	d1 40       	sbci	r29, 0x01	; 1
     87e:	c0 5e       	subi	r28, 0xE0	; 224
     880:	de 4f       	sbci	r29, 0xFE	; 254
     882:	18 82       	st	Y, r1
     884:	c0 52       	subi	r28, 0x20	; 32
     886:	d1 40       	sbci	r29, 0x01	; 1
     888:	cf 5d       	subi	r28, 0xDF	; 223
     88a:	de 4f       	sbci	r29, 0xFE	; 254
     88c:	18 82       	st	Y, r1
     88e:	c1 52       	subi	r28, 0x21	; 33
     890:	d1 40       	sbci	r29, 0x01	; 1
void UARTstrTx(char []);

int main(void)
{
	unsigned int uart_buff_index = 0;
	unsigned int buff_index=0;
     892:	21 2c       	mov	r2, r1
     894:	31 2c       	mov	r3, r1
	sei();
	
	while(1)
	{
		cnt = 0;
		cnt =  freqcalc();
     896:	2f df       	rcall	.-418    	; 0x6f6 <freqcalc>
     898:	6b 01       	movw	r12, r22
     89a:	7c 01       	movw	r14, r24
		
		if( cnt < 14990)
     89c:	6e 38       	cpi	r22, 0x8E	; 142
     89e:	7a 43       	sbci	r23, 0x3A	; 58
     8a0:	81 05       	cpc	r24, r1
     8a2:	91 05       	cpc	r25, r1
     8a4:	50 f0       	brcs	.+20     	; 0x8ba <main+0x188>
     8a6:	18 c0       	rjmp	.+48     	; 0x8d8 <main+0x1a6>
		{
			for(i=0; i<9; i++)
			{
				cnt = cnt + freqcalc();
     8a8:	26 df       	rcall	.-436    	; 0x6f6 <freqcalc>
     8aa:	c6 0e       	add	r12, r22
     8ac:	d7 1e       	adc	r13, r23
     8ae:	e8 1e       	adc	r14, r24
     8b0:	f9 1e       	adc	r15, r25
		cnt = 0;
		cnt =  freqcalc();
		
		if( cnt < 14990)
		{
			for(i=0; i<9; i++)
     8b2:	4f ef       	ldi	r20, 0xFF	; 255
     8b4:	a4 1a       	sub	r10, r20
     8b6:	b4 0a       	sbc	r11, r20
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <main+0x18c>
     8ba:	a1 2c       	mov	r10, r1
     8bc:	b1 2c       	mov	r11, r1
     8be:	89 e0       	ldi	r24, 0x09	; 9
     8c0:	a8 16       	cp	r10, r24
     8c2:	b1 04       	cpc	r11, r1
     8c4:	8c f3       	brlt	.-30     	; 0x8a8 <main+0x176>
			{
				cnt = cnt + freqcalc();
			}
			cnt=(cnt/10);
     8c6:	c7 01       	movw	r24, r14
     8c8:	b6 01       	movw	r22, r12
     8ca:	2a e0       	ldi	r18, 0x0A	; 10
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	46 d4       	rcall	.+2188   	; 0x1160 <__udivmodsi4>
     8d4:	69 01       	movw	r12, r18
     8d6:	7a 01       	movw	r14, r20
		}
	
		for(u=0;u<3;u++)
     8d8:	0f 2e       	mov	r0, r31
     8da:	f8 ee       	ldi	r31, 0xE8	; 232
     8dc:	8f 2e       	mov	r8, r31
     8de:	fd ef       	ldi	r31, 0xFD	; 253
     8e0:	9f 2e       	mov	r9, r31
     8e2:	a1 2c       	mov	r10, r1
     8e4:	b1 2c       	mov	r11, r1
     8e6:	f0 2d       	mov	r31, r0
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	36 c0       	rjmp	.+108    	; 0x95a <main+0x228>
		{
			for (i=0;i<12;i++)
			{
				delta = abs( noteclks[i][u] - cnt );
     8ee:	c9 01       	movw	r24, r18
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	82 0f       	add	r24, r18
     8f6:	93 1f       	adc	r25, r19
     8f8:	84 0f       	add	r24, r20
     8fa:	95 1f       	adc	r25, r21
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	ea e8       	ldi	r30, 0x8A	; 138
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	ec 0f       	add	r30, r28
     90a:	fd 1f       	adc	r31, r29
     90c:	e8 0f       	add	r30, r24
     90e:	f9 1f       	adc	r31, r25
     910:	80 81       	ld	r24, Z
     912:	91 81       	ldd	r25, Z+1	; 0x01
     914:	a2 81       	ldd	r26, Z+2	; 0x02
     916:	b3 81       	ldd	r27, Z+3	; 0x03
     918:	bc 01       	movw	r22, r24
     91a:	6c 19       	sub	r22, r12
     91c:	7d 09       	sbc	r23, r13
     91e:	cb 01       	movw	r24, r22
     920:	99 23       	and	r25, r25
     922:	24 f4       	brge	.+8      	; 0x92c <main+0x1fa>
     924:	88 27       	eor	r24, r24
     926:	99 27       	eor	r25, r25
     928:	86 1b       	sub	r24, r22
     92a:	97 0b       	sbc	r25, r23
     92c:	09 2e       	mov	r0, r25
     92e:	00 0c       	add	r0, r0
     930:	aa 0b       	sbc	r26, r26
     932:	bb 0b       	sbc	r27, r27
				if( small > delta )
     934:	88 15       	cp	r24, r8
     936:	99 05       	cpc	r25, r9
     938:	aa 05       	cpc	r26, r10
     93a:	bb 05       	cpc	r27, r11
     93c:	20 f4       	brcc	.+8      	; 0x946 <main+0x214>
				{
					small = delta;
					ib = i;
					ub = u;
     93e:	3a 01       	movw	r6, r20
			{
				delta = abs( noteclks[i][u] - cnt );
				if( small > delta )
				{
					small = delta;
					ib = i;
     940:	89 01       	movw	r16, r18
			for (i=0;i<12;i++)
			{
				delta = abs( noteclks[i][u] - cnt );
				if( small > delta )
				{
					small = delta;
     942:	4c 01       	movw	r8, r24
     944:	5d 01       	movw	r10, r26
			cnt=(cnt/10);
		}
	
		for(u=0;u<3;u++)
		{
			for (i=0;i<12;i++)
     946:	2f 5f       	subi	r18, 0xFF	; 255
     948:	3f 4f       	sbci	r19, 0xFF	; 255
     94a:	02 c0       	rjmp	.+4      	; 0x950 <main+0x21e>
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	2c 30       	cpi	r18, 0x0C	; 12
     952:	31 05       	cpc	r19, r1
     954:	64 f2       	brlt	.-104    	; 0x8ee <main+0x1bc>
				cnt = cnt + freqcalc();
			}
			cnt=(cnt/10);
		}
	
		for(u=0;u<3;u++)
     956:	4f 5f       	subi	r20, 0xFF	; 255
     958:	5f 4f       	sbci	r21, 0xFF	; 255
     95a:	43 30       	cpi	r20, 0x03	; 3
     95c:	51 05       	cpc	r21, r1
     95e:	b4 f3       	brlt	.-20     	; 0x94c <main+0x21a>
					ub = u;
				}
			}
		}
		small = 65000;
		printLCD(notesltr[ib],MIDLINE2);
     960:	58 01       	movw	r10, r16
     962:	aa 0c       	add	r10, r10
     964:	bb 1c       	adc	r11, r11
     966:	a0 0e       	add	r10, r16
     968:	b1 1e       	adc	r11, r17
     96a:	64 e0       	ldi	r22, 0x04	; 4
     96c:	86 e3       	ldi	r24, 0x36	; 54
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	8c 0f       	add	r24, r28
     972:	9d 1f       	adc	r25, r29
     974:	8a 0d       	add	r24, r10
     976:	9b 1d       	adc	r25, r11
     978:	77 dd       	rcall	.-1298   	; 0x468 <printLCD>
		
		notediff = (int)lround(168*(log((double)noteclks[ib][ub]/cnt)/log(2)));
     97a:	f5 01       	movw	r30, r10
     97c:	e6 0d       	add	r30, r6
     97e:	f7 1d       	adc	r31, r7
     980:	ee 0f       	add	r30, r30
     982:	ff 1f       	adc	r31, r31
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	aa e8       	ldi	r26, 0x8A	; 138
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	ac 0f       	add	r26, r28
     98e:	bd 1f       	adc	r27, r29
     990:	ea 0f       	add	r30, r26
     992:	fb 1f       	adc	r31, r27
     994:	60 81       	ld	r22, Z
     996:	71 81       	ldd	r23, Z+1	; 0x01
     998:	82 81       	ldd	r24, Z+2	; 0x02
     99a:	93 81       	ldd	r25, Z+3	; 0x03
     99c:	20 d2       	rcall	.+1088   	; 0xdde <__floatunsisf>
     99e:	c6 5e       	subi	r28, 0xE6	; 230
     9a0:	de 4f       	sbci	r29, 0xFE	; 254
     9a2:	68 83       	st	Y, r22
     9a4:	79 83       	std	Y+1, r23	; 0x01
     9a6:	8a 83       	std	Y+2, r24	; 0x02
     9a8:	9b 83       	std	Y+3, r25	; 0x03
     9aa:	ca 51       	subi	r28, 0x1A	; 26
     9ac:	d1 40       	sbci	r29, 0x01	; 1
     9ae:	c7 01       	movw	r24, r14
     9b0:	b6 01       	movw	r22, r12
     9b2:	15 d2       	rcall	.+1066   	; 0xdde <__floatunsisf>
     9b4:	4b 01       	movw	r8, r22
     9b6:	5c 01       	movw	r10, r24
     9b8:	9b 01       	movw	r18, r22
     9ba:	ac 01       	movw	r20, r24
     9bc:	c6 5e       	subi	r28, 0xE6	; 230
     9be:	de 4f       	sbci	r29, 0xFE	; 254
     9c0:	68 81       	ld	r22, Y
     9c2:	79 81       	ldd	r23, Y+1	; 0x01
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	9b 81       	ldd	r25, Y+3	; 0x03
     9c8:	ca 51       	subi	r28, 0x1A	; 26
     9ca:	d1 40       	sbci	r29, 0x01	; 1
     9cc:	74 d1       	rcall	.+744    	; 0xcb6 <__divsf3>
     9ce:	9e d2       	rcall	.+1340   	; 0xf0c <log>
     9d0:	28 e1       	ldi	r18, 0x18	; 24
     9d2:	32 e7       	ldi	r19, 0x72	; 114
     9d4:	41 e3       	ldi	r20, 0x31	; 49
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	6e d1       	rcall	.+732    	; 0xcb6 <__divsf3>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	48 e2       	ldi	r20, 0x28	; 40
     9e0:	53 e4       	ldi	r21, 0x43	; 67
     9e2:	04 d3       	rcall	.+1544   	; 0xfec <__mulsf3>
     9e4:	d3 d2       	rcall	.+1446   	; 0xf8c <lround>
		BarLCD(notediff);
     9e6:	cb 01       	movw	r24, r22
     9e8:	95 dd       	rcall	.-1238   	; 0x514 <BarLCD>
		
		clk_buff[buff_index] = cnt; //store clock count 
     9ea:	f1 01       	movw	r30, r2
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	21 e0       	ldi	r18, 0x01	; 1
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	2c 0f       	add	r18, r28
     9fa:	3d 1f       	adc	r19, r29
     9fc:	e2 0f       	add	r30, r18
     9fe:	f3 1f       	adc	r31, r19
     a00:	c0 82       	st	Z, r12
     a02:	d1 82       	std	Z+1, r13	; 0x01
     a04:	e2 82       	std	Z+2, r14	; 0x02
     a06:	f3 82       	std	Z+3, r15	; 0x03
		buff_index = (buff_index + 1) % BUFF_SIZE; //cycle over
     a08:	a1 01       	movw	r20, r2
     a0a:	4f 5f       	subi	r20, 0xFF	; 255
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	9a 01       	movw	r18, r20
     a10:	ad ec       	ldi	r26, 0xCD	; 205
     a12:	bc ec       	ldi	r27, 0xCC	; 204
     a14:	c7 d3       	rcall	.+1934   	; 0x11a4 <__umulhisi3>
     a16:	1c 01       	movw	r2, r24
     a18:	36 94       	lsr	r3
     a1a:	27 94       	ror	r2
     a1c:	36 94       	lsr	r3
     a1e:	27 94       	ror	r2
     a20:	36 94       	lsr	r3
     a22:	27 94       	ror	r2
     a24:	c1 01       	movw	r24, r2
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	22 0c       	add	r2, r2
     a2c:	33 1c       	adc	r3, r3
     a2e:	22 0c       	add	r2, r2
     a30:	33 1c       	adc	r3, r3
     a32:	22 0c       	add	r2, r2
     a34:	33 1c       	adc	r3, r3
     a36:	28 0e       	add	r2, r24
     a38:	39 1e       	adc	r3, r25
     a3a:	ca 01       	movw	r24, r20
     a3c:	82 19       	sub	r24, r2
     a3e:	93 09       	sbc	r25, r3
     a40:	1c 01       	movw	r2, r24
		
		stable = 1;
		for(i=1;i<BUFF_SIZE;i++)
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	27 c0       	rjmp	.+78     	; 0xa96 <main+0x364>
		{
			if (abs((int)(clk_buff[i] - clk_buff[i-1]))>1000)
     a48:	fc 01       	movw	r30, r24
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	a1 e0       	ldi	r26, 0x01	; 1
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	ac 0f       	add	r26, r28
     a58:	bd 1f       	adc	r27, r29
     a5a:	ea 0f       	add	r30, r26
     a5c:	fb 1f       	adc	r31, r27
     a5e:	40 81       	ld	r20, Z
     a60:	51 81       	ldd	r21, Z+1	; 0x01
     a62:	62 81       	ldd	r22, Z+2	; 0x02
     a64:	73 81       	ldd	r23, Z+3	; 0x03
     a66:	fc 01       	movw	r30, r24
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	ea 0f       	add	r30, r26
     a74:	fb 1f       	adc	r31, r27
     a76:	c0 80       	ld	r12, Z
     a78:	d1 80       	ldd	r13, Z+1	; 0x01
     a7a:	e2 80       	ldd	r14, Z+2	; 0x02
     a7c:	f3 80       	ldd	r15, Z+3	; 0x03
     a7e:	4c 19       	sub	r20, r12
     a80:	5d 09       	sbc	r21, r13
     a82:	9a 01       	movw	r18, r20
     a84:	22 f4       	brpl	.+8      	; 0xa8e <main+0x35c>
     a86:	22 27       	eor	r18, r18
     a88:	33 27       	eor	r19, r19
     a8a:	24 1b       	sub	r18, r20
     a8c:	35 0b       	sbc	r19, r21
     a8e:	29 3e       	cpi	r18, 0xE9	; 233
     a90:	33 40       	sbci	r19, 0x03	; 3
     a92:	3c f4       	brge	.+14     	; 0xaa2 <main+0x370>
		
		clk_buff[buff_index] = cnt; //store clock count 
		buff_index = (buff_index + 1) % BUFF_SIZE; //cycle over
		
		stable = 1;
		for(i=1;i<BUFF_SIZE;i++)
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	8a 30       	cpi	r24, 0x0A	; 10
     a98:	91 05       	cpc	r25, r1
     a9a:	b4 f2       	brlt	.-84     	; 0xa48 <main+0x316>
		BarLCD(notediff);
		
		clk_buff[buff_index] = cnt; //store clock count 
		buff_index = (buff_index + 1) % BUFF_SIZE; //cycle over
		
		stable = 1;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <main+0x374>
		for(i=1;i<BUFF_SIZE;i++)
		{
			if (abs((int)(clk_buff[i] - clk_buff[i-1]))>1000)
			{//make sure the count is stable
				stable = 0;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
				break;
			}
		}
		
		if(stable == 1)
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	09 f0       	breq	.+2      	; 0xaac <main+0x37a>
     aaa:	48 c0       	rjmp	.+144    	; 0xb3c <main+0x40a>
		{
			freq = 1/(((double)cnt)*period);
     aac:	27 ee       	ldi	r18, 0xE7	; 231
     aae:	35 ed       	ldi	r19, 0xD5	; 213
     ab0:	4f e7       	ldi	r20, 0x7F	; 127
     ab2:	54 e3       	ldi	r21, 0x34	; 52
     ab4:	c5 01       	movw	r24, r10
     ab6:	b4 01       	movw	r22, r8
     ab8:	99 d2       	rcall	.+1330   	; 0xfec <__mulsf3>
     aba:	9b 01       	movw	r18, r22
     abc:	ac 01       	movw	r20, r24
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 e8       	ldi	r24, 0x80	; 128
     ac4:	9f e3       	ldi	r25, 0x3F	; 63
     ac6:	f7 d0       	rcall	.+494    	; 0xcb6 <__divsf3>
     ac8:	f6 2e       	mov	r15, r22
     aca:	e7 2e       	mov	r14, r23
     acc:	d8 2e       	mov	r13, r24
     ace:	c9 2e       	mov	r12, r25
			
			if(fabs(freq - lastsent)>0.1)
     ad0:	c2 5e       	subi	r28, 0xE2	; 226
     ad2:	de 4f       	sbci	r29, 0xFE	; 254
     ad4:	28 81       	ld	r18, Y
     ad6:	ce 51       	subi	r28, 0x1E	; 30
     ad8:	d1 40       	sbci	r29, 0x01	; 1
     ada:	c1 5e       	subi	r28, 0xE1	; 225
     adc:	de 4f       	sbci	r29, 0xFE	; 254
     ade:	38 81       	ld	r19, Y
     ae0:	cf 51       	subi	r28, 0x1F	; 31
     ae2:	d1 40       	sbci	r29, 0x01	; 1
     ae4:	c0 5e       	subi	r28, 0xE0	; 224
     ae6:	de 4f       	sbci	r29, 0xFE	; 254
     ae8:	48 81       	ld	r20, Y
     aea:	c0 52       	subi	r28, 0x20	; 32
     aec:	d1 40       	sbci	r29, 0x01	; 1
     aee:	cf 5d       	subi	r28, 0xDF	; 223
     af0:	de 4f       	sbci	r29, 0xFE	; 254
     af2:	58 81       	ld	r21, Y
     af4:	c1 52       	subi	r28, 0x21	; 33
     af6:	d1 40       	sbci	r29, 0x01	; 1
     af8:	79 d0       	rcall	.+242    	; 0xbec <__subsf3>
     afa:	9f 77       	andi	r25, 0x7F	; 127
     afc:	2d ec       	ldi	r18, 0xCD	; 205
     afe:	3c ec       	ldi	r19, 0xCC	; 204
     b00:	4c ec       	ldi	r20, 0xCC	; 204
     b02:	5d e3       	ldi	r21, 0x3D	; 61
     b04:	fa d1       	rcall	.+1012   	; 0xefa <__gesf2>
     b06:	18 16       	cp	r1, r24
     b08:	cc f4       	brge	.+50     	; 0xb3c <main+0x40a>
			{
				float2str2UART(freq);
     b0a:	6f 2d       	mov	r22, r15
     b0c:	7e 2d       	mov	r23, r14
     b0e:	8d 2d       	mov	r24, r13
     b10:	9c 2d       	mov	r25, r12
     b12:	b9 dd       	rcall	.-1166   	; 0x686 <float2str2UART>
				lastsent = freq;
     b14:	c2 5e       	subi	r28, 0xE2	; 226
     b16:	de 4f       	sbci	r29, 0xFE	; 254
     b18:	f8 82       	st	Y, r15
     b1a:	ce 51       	subi	r28, 0x1E	; 30
     b1c:	d1 40       	sbci	r29, 0x01	; 1
     b1e:	c1 5e       	subi	r28, 0xE1	; 225
     b20:	de 4f       	sbci	r29, 0xFE	; 254
     b22:	e8 82       	st	Y, r14
     b24:	cf 51       	subi	r28, 0x1F	; 31
     b26:	d1 40       	sbci	r29, 0x01	; 1
     b28:	c0 5e       	subi	r28, 0xE0	; 224
     b2a:	de 4f       	sbci	r29, 0xFE	; 254
     b2c:	d8 82       	st	Y, r13
     b2e:	c0 52       	subi	r28, 0x20	; 32
     b30:	d1 40       	sbci	r29, 0x01	; 1
     b32:	cf 5d       	subi	r28, 0xDF	; 223
     b34:	de 4f       	sbci	r29, 0xFE	; 254
     b36:	c8 82       	st	Y, r12
     b38:	c1 52       	subi	r28, 0x21	; 33
     b3a:	d1 40       	sbci	r29, 0x01	; 1
			}
		}
		
			cli();
     b3c:	f8 94       	cli
			i = 0;
			uart_buff_index = uart_tail;
     b3e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <uart_tail>
     b42:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <uart_tail+0x1>
				lastsent = freq;
			}
		}
		
			cli();
			i = 0;
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	50 e0       	ldi	r21, 0x00	; 0
			uart_buff_index = uart_tail;
			while ( (uart_buff[uart_buff_index] != 0x00) && (i < BT_BUFF) )
     b4a:	20 c0       	rjmp	.+64     	; 0xb8c <main+0x45a>
			{
				uart_buff_cp[i] = uart_buff[uart_buff_index];
     b4c:	fc 01       	movw	r30, r24
     b4e:	e2 51       	subi	r30, 0x12	; 18
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	20 81       	ld	r18, Z
     b54:	e9 e2       	ldi	r30, 0x29	; 41
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	ec 0f       	add	r30, r28
     b5a:	fd 1f       	adc	r31, r29
     b5c:	e4 0f       	add	r30, r20
     b5e:	f5 1f       	adc	r31, r21
     b60:	20 83       	st	Z, r18
				uart_buff_index = (uart_buff_index + 1) % BT_BUFF;
     b62:	fc 01       	movw	r30, r24
     b64:	31 96       	adiw	r30, 0x01	; 1
     b66:	9f 01       	movw	r18, r30
     b68:	a5 ec       	ldi	r26, 0xC5	; 197
     b6a:	be e4       	ldi	r27, 0x4E	; 78
     b6c:	1b d3       	rcall	.+1590   	; 0x11a4 <__umulhisi3>
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	96 95       	lsr	r25
     b74:	87 95       	ror	r24
     b76:	6d e0       	ldi	r22, 0x0D	; 13
     b78:	68 9f       	mul	r22, r24
     b7a:	90 01       	movw	r18, r0
     b7c:	69 9f       	mul	r22, r25
     b7e:	30 0d       	add	r19, r0
     b80:	11 24       	eor	r1, r1
     b82:	cf 01       	movw	r24, r30
     b84:	82 1b       	sub	r24, r18
     b86:	93 0b       	sbc	r25, r19
				i++;
     b88:	4f 5f       	subi	r20, 0xFF	; 255
     b8a:	5f 4f       	sbci	r21, 0xFF	; 255
		}
		
			cli();
			i = 0;
			uart_buff_index = uart_tail;
			while ( (uart_buff[uart_buff_index] != 0x00) && (i < BT_BUFF) )
     b8c:	fc 01       	movw	r30, r24
     b8e:	e2 51       	subi	r30, 0x12	; 18
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	20 81       	ld	r18, Z
     b94:	22 23       	and	r18, r18
     b96:	19 f0       	breq	.+6      	; 0xb9e <main+0x46c>
     b98:	4d 30       	cpi	r20, 0x0D	; 13
     b9a:	51 05       	cpc	r21, r1
     b9c:	bc f2       	brlt	.-82     	; 0xb4c <main+0x41a>
			{
				uart_buff_cp[i] = uart_buff[uart_buff_index];
				uart_buff_index = (uart_buff_index + 1) % BT_BUFF;
				i++;
			}
			uart_cnt = 0;
     b9e:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__data_end+0x1>
     ba2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__data_end>
			uart_buff_cp[i] = 0x00;
     ba6:	e9 e2       	ldi	r30, 0x29	; 41
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ec 0f       	add	r30, r28
     bac:	fd 1f       	adc	r31, r29
     bae:	e4 0f       	add	r30, r20
     bb0:	f5 1f       	adc	r31, r21
     bb2:	10 82       	st	Z, r1
			printLCD("                ",LINE1);
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	83 ec       	ldi	r24, 0xC3	; 195
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	56 dc       	rcall	.-1876   	; 0x468 <printLCD>
			printLCD("User:",LINE1);
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	84 ed       	ldi	r24, 0xD4	; 212
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	52 dc       	rcall	.-1884   	; 0x468 <printLCD>
			printLCD(uart_buff_cp,ADRSAME);
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	ce 01       	movw	r24, r28
     bc8:	89 96       	adiw	r24, 0x29	; 41
     bca:	4e dc       	rcall	.-1892   	; 0x468 <printLCD>
			for(i=0;i<BT_BUFF;i++)
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <main+0x4b0>
			{
				uart_buff_cp[i] = 0x00;
     bd2:	e9 e2       	ldi	r30, 0x29	; 41
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	ec 0f       	add	r30, r28
     bd8:	fd 1f       	adc	r31, r29
     bda:	e8 0f       	add	r30, r24
     bdc:	f9 1f       	adc	r31, r25
     bde:	10 82       	st	Z, r1
			uart_cnt = 0;
			uart_buff_cp[i] = 0x00;
			printLCD("                ",LINE1);
			printLCD("User:",LINE1);
			printLCD(uart_buff_cp,ADRSAME);
			for(i=0;i<BT_BUFF;i++)
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	8d 30       	cpi	r24, 0x0D	; 13
     be4:	91 05       	cpc	r25, r1
     be6:	ac f3       	brlt	.-22     	; 0xbd2 <main+0x4a0>
			{
				uart_buff_cp[i] = 0x00;
			}
			sei();
     be8:	78 94       	sei
	}
     bea:	55 ce       	rjmp	.-854    	; 0x896 <main+0x164>

00000bec <__subsf3>:
     bec:	50 58       	subi	r21, 0x80	; 128

00000bee <__addsf3>:
     bee:	bb 27       	eor	r27, r27
     bf0:	aa 27       	eor	r26, r26
     bf2:	0e d0       	rcall	.+28     	; 0xc10 <__addsf3x>
     bf4:	48 c1       	rjmp	.+656    	; 0xe86 <__fp_round>
     bf6:	39 d1       	rcall	.+626    	; 0xe6a <__fp_pscA>
     bf8:	30 f0       	brcs	.+12     	; 0xc06 <__addsf3+0x18>
     bfa:	3e d1       	rcall	.+636    	; 0xe78 <__fp_pscB>
     bfc:	20 f0       	brcs	.+8      	; 0xc06 <__addsf3+0x18>
     bfe:	31 f4       	brne	.+12     	; 0xc0c <__addsf3+0x1e>
     c00:	9f 3f       	cpi	r25, 0xFF	; 255
     c02:	11 f4       	brne	.+4      	; 0xc08 <__addsf3+0x1a>
     c04:	1e f4       	brtc	.+6      	; 0xc0c <__addsf3+0x1e>
     c06:	2e c1       	rjmp	.+604    	; 0xe64 <__fp_nan>
     c08:	0e f4       	brtc	.+2      	; 0xc0c <__addsf3+0x1e>
     c0a:	e0 95       	com	r30
     c0c:	e7 fb       	bst	r30, 7
     c0e:	24 c1       	rjmp	.+584    	; 0xe58 <__fp_inf>

00000c10 <__addsf3x>:
     c10:	e9 2f       	mov	r30, r25
     c12:	4a d1       	rcall	.+660    	; 0xea8 <__fp_split3>
     c14:	80 f3       	brcs	.-32     	; 0xbf6 <__addsf3+0x8>
     c16:	ba 17       	cp	r27, r26
     c18:	62 07       	cpc	r22, r18
     c1a:	73 07       	cpc	r23, r19
     c1c:	84 07       	cpc	r24, r20
     c1e:	95 07       	cpc	r25, r21
     c20:	18 f0       	brcs	.+6      	; 0xc28 <__addsf3x+0x18>
     c22:	71 f4       	brne	.+28     	; 0xc40 <__addsf3x+0x30>
     c24:	9e f5       	brtc	.+102    	; 0xc8c <__addsf3x+0x7c>
     c26:	62 c1       	rjmp	.+708    	; 0xeec <__fp_zero>
     c28:	0e f4       	brtc	.+2      	; 0xc2c <__addsf3x+0x1c>
     c2a:	e0 95       	com	r30
     c2c:	0b 2e       	mov	r0, r27
     c2e:	ba 2f       	mov	r27, r26
     c30:	a0 2d       	mov	r26, r0
     c32:	0b 01       	movw	r0, r22
     c34:	b9 01       	movw	r22, r18
     c36:	90 01       	movw	r18, r0
     c38:	0c 01       	movw	r0, r24
     c3a:	ca 01       	movw	r24, r20
     c3c:	a0 01       	movw	r20, r0
     c3e:	11 24       	eor	r1, r1
     c40:	ff 27       	eor	r31, r31
     c42:	59 1b       	sub	r21, r25
     c44:	99 f0       	breq	.+38     	; 0xc6c <__addsf3x+0x5c>
     c46:	59 3f       	cpi	r21, 0xF9	; 249
     c48:	50 f4       	brcc	.+20     	; 0xc5e <__addsf3x+0x4e>
     c4a:	50 3e       	cpi	r21, 0xE0	; 224
     c4c:	68 f1       	brcs	.+90     	; 0xca8 <__addsf3x+0x98>
     c4e:	1a 16       	cp	r1, r26
     c50:	f0 40       	sbci	r31, 0x00	; 0
     c52:	a2 2f       	mov	r26, r18
     c54:	23 2f       	mov	r18, r19
     c56:	34 2f       	mov	r19, r20
     c58:	44 27       	eor	r20, r20
     c5a:	58 5f       	subi	r21, 0xF8	; 248
     c5c:	f3 cf       	rjmp	.-26     	; 0xc44 <__addsf3x+0x34>
     c5e:	46 95       	lsr	r20
     c60:	37 95       	ror	r19
     c62:	27 95       	ror	r18
     c64:	a7 95       	ror	r26
     c66:	f0 40       	sbci	r31, 0x00	; 0
     c68:	53 95       	inc	r21
     c6a:	c9 f7       	brne	.-14     	; 0xc5e <__addsf3x+0x4e>
     c6c:	7e f4       	brtc	.+30     	; 0xc8c <__addsf3x+0x7c>
     c6e:	1f 16       	cp	r1, r31
     c70:	ba 0b       	sbc	r27, r26
     c72:	62 0b       	sbc	r22, r18
     c74:	73 0b       	sbc	r23, r19
     c76:	84 0b       	sbc	r24, r20
     c78:	ba f0       	brmi	.+46     	; 0xca8 <__addsf3x+0x98>
     c7a:	91 50       	subi	r25, 0x01	; 1
     c7c:	a1 f0       	breq	.+40     	; 0xca6 <__addsf3x+0x96>
     c7e:	ff 0f       	add	r31, r31
     c80:	bb 1f       	adc	r27, r27
     c82:	66 1f       	adc	r22, r22
     c84:	77 1f       	adc	r23, r23
     c86:	88 1f       	adc	r24, r24
     c88:	c2 f7       	brpl	.-16     	; 0xc7a <__addsf3x+0x6a>
     c8a:	0e c0       	rjmp	.+28     	; 0xca8 <__addsf3x+0x98>
     c8c:	ba 0f       	add	r27, r26
     c8e:	62 1f       	adc	r22, r18
     c90:	73 1f       	adc	r23, r19
     c92:	84 1f       	adc	r24, r20
     c94:	48 f4       	brcc	.+18     	; 0xca8 <__addsf3x+0x98>
     c96:	87 95       	ror	r24
     c98:	77 95       	ror	r23
     c9a:	67 95       	ror	r22
     c9c:	b7 95       	ror	r27
     c9e:	f7 95       	ror	r31
     ca0:	9e 3f       	cpi	r25, 0xFE	; 254
     ca2:	08 f0       	brcs	.+2      	; 0xca6 <__addsf3x+0x96>
     ca4:	b3 cf       	rjmp	.-154    	; 0xc0c <__addsf3+0x1e>
     ca6:	93 95       	inc	r25
     ca8:	88 0f       	add	r24, r24
     caa:	08 f0       	brcs	.+2      	; 0xcae <__addsf3x+0x9e>
     cac:	99 27       	eor	r25, r25
     cae:	ee 0f       	add	r30, r30
     cb0:	97 95       	ror	r25
     cb2:	87 95       	ror	r24
     cb4:	08 95       	ret

00000cb6 <__divsf3>:
     cb6:	0c d0       	rcall	.+24     	; 0xcd0 <__divsf3x>
     cb8:	e6 c0       	rjmp	.+460    	; 0xe86 <__fp_round>
     cba:	de d0       	rcall	.+444    	; 0xe78 <__fp_pscB>
     cbc:	40 f0       	brcs	.+16     	; 0xcce <__divsf3+0x18>
     cbe:	d5 d0       	rcall	.+426    	; 0xe6a <__fp_pscA>
     cc0:	30 f0       	brcs	.+12     	; 0xcce <__divsf3+0x18>
     cc2:	21 f4       	brne	.+8      	; 0xccc <__divsf3+0x16>
     cc4:	5f 3f       	cpi	r21, 0xFF	; 255
     cc6:	19 f0       	breq	.+6      	; 0xcce <__divsf3+0x18>
     cc8:	c7 c0       	rjmp	.+398    	; 0xe58 <__fp_inf>
     cca:	51 11       	cpse	r21, r1
     ccc:	10 c1       	rjmp	.+544    	; 0xeee <__fp_szero>
     cce:	ca c0       	rjmp	.+404    	; 0xe64 <__fp_nan>

00000cd0 <__divsf3x>:
     cd0:	eb d0       	rcall	.+470    	; 0xea8 <__fp_split3>
     cd2:	98 f3       	brcs	.-26     	; 0xcba <__divsf3+0x4>

00000cd4 <__divsf3_pse>:
     cd4:	99 23       	and	r25, r25
     cd6:	c9 f3       	breq	.-14     	; 0xcca <__divsf3+0x14>
     cd8:	55 23       	and	r21, r21
     cda:	b1 f3       	breq	.-20     	; 0xcc8 <__divsf3+0x12>
     cdc:	95 1b       	sub	r25, r21
     cde:	55 0b       	sbc	r21, r21
     ce0:	bb 27       	eor	r27, r27
     ce2:	aa 27       	eor	r26, r26
     ce4:	62 17       	cp	r22, r18
     ce6:	73 07       	cpc	r23, r19
     ce8:	84 07       	cpc	r24, r20
     cea:	38 f0       	brcs	.+14     	; 0xcfa <__divsf3_pse+0x26>
     cec:	9f 5f       	subi	r25, 0xFF	; 255
     cee:	5f 4f       	sbci	r21, 0xFF	; 255
     cf0:	22 0f       	add	r18, r18
     cf2:	33 1f       	adc	r19, r19
     cf4:	44 1f       	adc	r20, r20
     cf6:	aa 1f       	adc	r26, r26
     cf8:	a9 f3       	breq	.-22     	; 0xce4 <__divsf3_pse+0x10>
     cfa:	33 d0       	rcall	.+102    	; 0xd62 <__divsf3_pse+0x8e>
     cfc:	0e 2e       	mov	r0, r30
     cfe:	3a f0       	brmi	.+14     	; 0xd0e <__divsf3_pse+0x3a>
     d00:	e0 e8       	ldi	r30, 0x80	; 128
     d02:	30 d0       	rcall	.+96     	; 0xd64 <__divsf3_pse+0x90>
     d04:	91 50       	subi	r25, 0x01	; 1
     d06:	50 40       	sbci	r21, 0x00	; 0
     d08:	e6 95       	lsr	r30
     d0a:	00 1c       	adc	r0, r0
     d0c:	ca f7       	brpl	.-14     	; 0xd00 <__divsf3_pse+0x2c>
     d0e:	29 d0       	rcall	.+82     	; 0xd62 <__divsf3_pse+0x8e>
     d10:	fe 2f       	mov	r31, r30
     d12:	27 d0       	rcall	.+78     	; 0xd62 <__divsf3_pse+0x8e>
     d14:	66 0f       	add	r22, r22
     d16:	77 1f       	adc	r23, r23
     d18:	88 1f       	adc	r24, r24
     d1a:	bb 1f       	adc	r27, r27
     d1c:	26 17       	cp	r18, r22
     d1e:	37 07       	cpc	r19, r23
     d20:	48 07       	cpc	r20, r24
     d22:	ab 07       	cpc	r26, r27
     d24:	b0 e8       	ldi	r27, 0x80	; 128
     d26:	09 f0       	breq	.+2      	; 0xd2a <__divsf3_pse+0x56>
     d28:	bb 0b       	sbc	r27, r27
     d2a:	80 2d       	mov	r24, r0
     d2c:	bf 01       	movw	r22, r30
     d2e:	ff 27       	eor	r31, r31
     d30:	93 58       	subi	r25, 0x83	; 131
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	2a f0       	brmi	.+10     	; 0xd40 <__divsf3_pse+0x6c>
     d36:	9e 3f       	cpi	r25, 0xFE	; 254
     d38:	51 05       	cpc	r21, r1
     d3a:	68 f0       	brcs	.+26     	; 0xd56 <__divsf3_pse+0x82>
     d3c:	8d c0       	rjmp	.+282    	; 0xe58 <__fp_inf>
     d3e:	d7 c0       	rjmp	.+430    	; 0xeee <__fp_szero>
     d40:	5f 3f       	cpi	r21, 0xFF	; 255
     d42:	ec f3       	brlt	.-6      	; 0xd3e <__divsf3_pse+0x6a>
     d44:	98 3e       	cpi	r25, 0xE8	; 232
     d46:	dc f3       	brlt	.-10     	; 0xd3e <__divsf3_pse+0x6a>
     d48:	86 95       	lsr	r24
     d4a:	77 95       	ror	r23
     d4c:	67 95       	ror	r22
     d4e:	b7 95       	ror	r27
     d50:	f7 95       	ror	r31
     d52:	9f 5f       	subi	r25, 0xFF	; 255
     d54:	c9 f7       	brne	.-14     	; 0xd48 <__divsf3_pse+0x74>
     d56:	88 0f       	add	r24, r24
     d58:	91 1d       	adc	r25, r1
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	97 f9       	bld	r25, 7
     d60:	08 95       	ret
     d62:	e1 e0       	ldi	r30, 0x01	; 1
     d64:	66 0f       	add	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	88 1f       	adc	r24, r24
     d6a:	bb 1f       	adc	r27, r27
     d6c:	62 17       	cp	r22, r18
     d6e:	73 07       	cpc	r23, r19
     d70:	84 07       	cpc	r24, r20
     d72:	ba 07       	cpc	r27, r26
     d74:	20 f0       	brcs	.+8      	; 0xd7e <__divsf3_pse+0xaa>
     d76:	62 1b       	sub	r22, r18
     d78:	73 0b       	sbc	r23, r19
     d7a:	84 0b       	sbc	r24, r20
     d7c:	ba 0b       	sbc	r27, r26
     d7e:	ee 1f       	adc	r30, r30
     d80:	88 f7       	brcc	.-30     	; 0xd64 <__divsf3_pse+0x90>
     d82:	e0 95       	com	r30
     d84:	08 95       	ret

00000d86 <__fixunssfsi>:
     d86:	98 d0       	rcall	.+304    	; 0xeb8 <__fp_splitA>
     d88:	88 f0       	brcs	.+34     	; 0xdac <__fixunssfsi+0x26>
     d8a:	9f 57       	subi	r25, 0x7F	; 127
     d8c:	90 f0       	brcs	.+36     	; 0xdb2 <__fixunssfsi+0x2c>
     d8e:	b9 2f       	mov	r27, r25
     d90:	99 27       	eor	r25, r25
     d92:	b7 51       	subi	r27, 0x17	; 23
     d94:	a0 f0       	brcs	.+40     	; 0xdbe <__fixunssfsi+0x38>
     d96:	d1 f0       	breq	.+52     	; 0xdcc <__fixunssfsi+0x46>
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	1a f0       	brmi	.+6      	; 0xda8 <__fixunssfsi+0x22>
     da2:	ba 95       	dec	r27
     da4:	c9 f7       	brne	.-14     	; 0xd98 <__fixunssfsi+0x12>
     da6:	12 c0       	rjmp	.+36     	; 0xdcc <__fixunssfsi+0x46>
     da8:	b1 30       	cpi	r27, 0x01	; 1
     daa:	81 f0       	breq	.+32     	; 0xdcc <__fixunssfsi+0x46>
     dac:	9f d0       	rcall	.+318    	; 0xeec <__fp_zero>
     dae:	b1 e0       	ldi	r27, 0x01	; 1
     db0:	08 95       	ret
     db2:	9c c0       	rjmp	.+312    	; 0xeec <__fp_zero>
     db4:	67 2f       	mov	r22, r23
     db6:	78 2f       	mov	r23, r24
     db8:	88 27       	eor	r24, r24
     dba:	b8 5f       	subi	r27, 0xF8	; 248
     dbc:	39 f0       	breq	.+14     	; 0xdcc <__fixunssfsi+0x46>
     dbe:	b9 3f       	cpi	r27, 0xF9	; 249
     dc0:	cc f3       	brlt	.-14     	; 0xdb4 <__fixunssfsi+0x2e>
     dc2:	86 95       	lsr	r24
     dc4:	77 95       	ror	r23
     dc6:	67 95       	ror	r22
     dc8:	b3 95       	inc	r27
     dca:	d9 f7       	brne	.-10     	; 0xdc2 <__fixunssfsi+0x3c>
     dcc:	3e f4       	brtc	.+14     	; 0xddc <__fixunssfsi+0x56>
     dce:	90 95       	com	r25
     dd0:	80 95       	com	r24
     dd2:	70 95       	com	r23
     dd4:	61 95       	neg	r22
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	8f 4f       	sbci	r24, 0xFF	; 255
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	08 95       	ret

00000dde <__floatunsisf>:
     dde:	e8 94       	clt
     de0:	09 c0       	rjmp	.+18     	; 0xdf4 <__floatsisf+0x12>

00000de2 <__floatsisf>:
     de2:	97 fb       	bst	r25, 7
     de4:	3e f4       	brtc	.+14     	; 0xdf4 <__floatsisf+0x12>
     de6:	90 95       	com	r25
     de8:	80 95       	com	r24
     dea:	70 95       	com	r23
     dec:	61 95       	neg	r22
     dee:	7f 4f       	sbci	r23, 0xFF	; 255
     df0:	8f 4f       	sbci	r24, 0xFF	; 255
     df2:	9f 4f       	sbci	r25, 0xFF	; 255
     df4:	99 23       	and	r25, r25
     df6:	a9 f0       	breq	.+42     	; 0xe22 <__floatsisf+0x40>
     df8:	f9 2f       	mov	r31, r25
     dfa:	96 e9       	ldi	r25, 0x96	; 150
     dfc:	bb 27       	eor	r27, r27
     dfe:	93 95       	inc	r25
     e00:	f6 95       	lsr	r31
     e02:	87 95       	ror	r24
     e04:	77 95       	ror	r23
     e06:	67 95       	ror	r22
     e08:	b7 95       	ror	r27
     e0a:	f1 11       	cpse	r31, r1
     e0c:	f8 cf       	rjmp	.-16     	; 0xdfe <__floatsisf+0x1c>
     e0e:	fa f4       	brpl	.+62     	; 0xe4e <__floatsisf+0x6c>
     e10:	bb 0f       	add	r27, r27
     e12:	11 f4       	brne	.+4      	; 0xe18 <__floatsisf+0x36>
     e14:	60 ff       	sbrs	r22, 0
     e16:	1b c0       	rjmp	.+54     	; 0xe4e <__floatsisf+0x6c>
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	8f 4f       	sbci	r24, 0xFF	; 255
     e1e:	9f 4f       	sbci	r25, 0xFF	; 255
     e20:	16 c0       	rjmp	.+44     	; 0xe4e <__floatsisf+0x6c>
     e22:	88 23       	and	r24, r24
     e24:	11 f0       	breq	.+4      	; 0xe2a <__floatsisf+0x48>
     e26:	96 e9       	ldi	r25, 0x96	; 150
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <__floatsisf+0x6a>
     e2a:	77 23       	and	r23, r23
     e2c:	21 f0       	breq	.+8      	; 0xe36 <__floatsisf+0x54>
     e2e:	9e e8       	ldi	r25, 0x8E	; 142
     e30:	87 2f       	mov	r24, r23
     e32:	76 2f       	mov	r23, r22
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <__floatsisf+0x5e>
     e36:	66 23       	and	r22, r22
     e38:	71 f0       	breq	.+28     	; 0xe56 <__floatsisf+0x74>
     e3a:	96 e8       	ldi	r25, 0x86	; 134
     e3c:	86 2f       	mov	r24, r22
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	2a f0       	brmi	.+10     	; 0xe4e <__floatsisf+0x6c>
     e44:	9a 95       	dec	r25
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	88 1f       	adc	r24, r24
     e4c:	da f7       	brpl	.-10     	; 0xe44 <__floatsisf+0x62>
     e4e:	88 0f       	add	r24, r24
     e50:	96 95       	lsr	r25
     e52:	87 95       	ror	r24
     e54:	97 f9       	bld	r25, 7
     e56:	08 95       	ret

00000e58 <__fp_inf>:
     e58:	97 f9       	bld	r25, 7
     e5a:	9f 67       	ori	r25, 0x7F	; 127
     e5c:	80 e8       	ldi	r24, 0x80	; 128
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	08 95       	ret

00000e64 <__fp_nan>:
     e64:	9f ef       	ldi	r25, 0xFF	; 255
     e66:	80 ec       	ldi	r24, 0xC0	; 192
     e68:	08 95       	ret

00000e6a <__fp_pscA>:
     e6a:	00 24       	eor	r0, r0
     e6c:	0a 94       	dec	r0
     e6e:	16 16       	cp	r1, r22
     e70:	17 06       	cpc	r1, r23
     e72:	18 06       	cpc	r1, r24
     e74:	09 06       	cpc	r0, r25
     e76:	08 95       	ret

00000e78 <__fp_pscB>:
     e78:	00 24       	eor	r0, r0
     e7a:	0a 94       	dec	r0
     e7c:	12 16       	cp	r1, r18
     e7e:	13 06       	cpc	r1, r19
     e80:	14 06       	cpc	r1, r20
     e82:	05 06       	cpc	r0, r21
     e84:	08 95       	ret

00000e86 <__fp_round>:
     e86:	09 2e       	mov	r0, r25
     e88:	03 94       	inc	r0
     e8a:	00 0c       	add	r0, r0
     e8c:	11 f4       	brne	.+4      	; 0xe92 <__fp_round+0xc>
     e8e:	88 23       	and	r24, r24
     e90:	52 f0       	brmi	.+20     	; 0xea6 <__fp_round+0x20>
     e92:	bb 0f       	add	r27, r27
     e94:	40 f4       	brcc	.+16     	; 0xea6 <__fp_round+0x20>
     e96:	bf 2b       	or	r27, r31
     e98:	11 f4       	brne	.+4      	; 0xe9e <__fp_round+0x18>
     e9a:	60 ff       	sbrs	r22, 0
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <__fp_round+0x20>
     e9e:	6f 5f       	subi	r22, 0xFF	; 255
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	8f 4f       	sbci	r24, 0xFF	; 255
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	08 95       	ret

00000ea8 <__fp_split3>:
     ea8:	57 fd       	sbrc	r21, 7
     eaa:	90 58       	subi	r25, 0x80	; 128
     eac:	44 0f       	add	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	59 f0       	breq	.+22     	; 0xec8 <__fp_splitA+0x10>
     eb2:	5f 3f       	cpi	r21, 0xFF	; 255
     eb4:	71 f0       	breq	.+28     	; 0xed2 <__fp_splitA+0x1a>
     eb6:	47 95       	ror	r20

00000eb8 <__fp_splitA>:
     eb8:	88 0f       	add	r24, r24
     eba:	97 fb       	bst	r25, 7
     ebc:	99 1f       	adc	r25, r25
     ebe:	61 f0       	breq	.+24     	; 0xed8 <__fp_splitA+0x20>
     ec0:	9f 3f       	cpi	r25, 0xFF	; 255
     ec2:	79 f0       	breq	.+30     	; 0xee2 <__fp_splitA+0x2a>
     ec4:	87 95       	ror	r24
     ec6:	08 95       	ret
     ec8:	12 16       	cp	r1, r18
     eca:	13 06       	cpc	r1, r19
     ecc:	14 06       	cpc	r1, r20
     ece:	55 1f       	adc	r21, r21
     ed0:	f2 cf       	rjmp	.-28     	; 0xeb6 <__fp_split3+0xe>
     ed2:	46 95       	lsr	r20
     ed4:	f1 df       	rcall	.-30     	; 0xeb8 <__fp_splitA>
     ed6:	08 c0       	rjmp	.+16     	; 0xee8 <__fp_splitA+0x30>
     ed8:	16 16       	cp	r1, r22
     eda:	17 06       	cpc	r1, r23
     edc:	18 06       	cpc	r1, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	f1 cf       	rjmp	.-30     	; 0xec4 <__fp_splitA+0xc>
     ee2:	86 95       	lsr	r24
     ee4:	71 05       	cpc	r23, r1
     ee6:	61 05       	cpc	r22, r1
     ee8:	08 94       	sec
     eea:	08 95       	ret

00000eec <__fp_zero>:
     eec:	e8 94       	clt

00000eee <__fp_szero>:
     eee:	bb 27       	eor	r27, r27
     ef0:	66 27       	eor	r22, r22
     ef2:	77 27       	eor	r23, r23
     ef4:	cb 01       	movw	r24, r22
     ef6:	97 f9       	bld	r25, 7
     ef8:	08 95       	ret

00000efa <__gesf2>:
     efa:	db d0       	rcall	.+438    	; 0x10b2 <__fp_cmp>
     efc:	08 f4       	brcc	.+2      	; 0xf00 <__gesf2+0x6>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	08 95       	ret
     f02:	0e f0       	brts	.+2      	; 0xf06 <__gesf2+0xc>
     f04:	fa c0       	rjmp	.+500    	; 0x10fa <__fp_mpack>
     f06:	ae cf       	rjmp	.-164    	; 0xe64 <__fp_nan>
     f08:	68 94       	set
     f0a:	a6 cf       	rjmp	.-180    	; 0xe58 <__fp_inf>

00000f0c <log>:
     f0c:	d5 df       	rcall	.-86     	; 0xeb8 <__fp_splitA>
     f0e:	c8 f3       	brcs	.-14     	; 0xf02 <__gesf2+0x8>
     f10:	99 23       	and	r25, r25
     f12:	d1 f3       	breq	.-12     	; 0xf08 <__gesf2+0xe>
     f14:	c6 f3       	brts	.-16     	; 0xf06 <__gesf2+0xc>
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	1f 93       	push	r17
     f1c:	0f 93       	push	r16
     f1e:	ff 92       	push	r15
     f20:	c9 2f       	mov	r28, r25
     f22:	dd 27       	eor	r29, r29
     f24:	88 23       	and	r24, r24
     f26:	2a f0       	brmi	.+10     	; 0xf32 <log+0x26>
     f28:	21 97       	sbiw	r28, 0x01	; 1
     f2a:	66 0f       	add	r22, r22
     f2c:	77 1f       	adc	r23, r23
     f2e:	88 1f       	adc	r24, r24
     f30:	da f7       	brpl	.-10     	; 0xf28 <log+0x1c>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e8       	ldi	r20, 0x80	; 128
     f38:	5f eb       	ldi	r21, 0xBF	; 191
     f3a:	9f e3       	ldi	r25, 0x3F	; 63
     f3c:	88 39       	cpi	r24, 0x98	; 152
     f3e:	20 f0       	brcs	.+8      	; 0xf48 <log+0x3c>
     f40:	80 3e       	cpi	r24, 0xE0	; 224
     f42:	30 f0       	brcs	.+12     	; 0xf50 <log+0x44>
     f44:	21 96       	adiw	r28, 0x01	; 1
     f46:	8f 77       	andi	r24, 0x7F	; 127
     f48:	52 de       	rcall	.-860    	; 0xbee <__addsf3>
     f4a:	e2 e2       	ldi	r30, 0x22	; 34
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <log+0x4a>
     f50:	4e de       	rcall	.-868    	; 0xbee <__addsf3>
     f52:	ef e4       	ldi	r30, 0x4F	; 79
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	df d0       	rcall	.+446    	; 0x1116 <__fp_powser>
     f58:	8b 01       	movw	r16, r22
     f5a:	be 01       	movw	r22, r28
     f5c:	ec 01       	movw	r28, r24
     f5e:	fb 2e       	mov	r15, r27
     f60:	6f 57       	subi	r22, 0x7F	; 127
     f62:	71 09       	sbc	r23, r1
     f64:	75 95       	asr	r23
     f66:	77 1f       	adc	r23, r23
     f68:	88 0b       	sbc	r24, r24
     f6a:	99 0b       	sbc	r25, r25
     f6c:	3a df       	rcall	.-396    	; 0xde2 <__floatsisf>
     f6e:	28 e1       	ldi	r18, 0x18	; 24
     f70:	32 e7       	ldi	r19, 0x72	; 114
     f72:	41 e3       	ldi	r20, 0x31	; 49
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	46 d0       	rcall	.+140    	; 0x1004 <__mulsf3x>
     f78:	af 2d       	mov	r26, r15
     f7a:	98 01       	movw	r18, r16
     f7c:	ae 01       	movw	r20, r28
     f7e:	ff 90       	pop	r15
     f80:	0f 91       	pop	r16
     f82:	1f 91       	pop	r17
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	43 de       	rcall	.-890    	; 0xc10 <__addsf3x>
     f8a:	7d cf       	rjmp	.-262    	; 0xe86 <__fp_round>

00000f8c <lround>:
     f8c:	95 df       	rcall	.-214    	; 0xeb8 <__fp_splitA>
     f8e:	58 f1       	brcs	.+86     	; 0xfe6 <lround+0x5a>
     f90:	9e 57       	subi	r25, 0x7E	; 126
     f92:	58 f1       	brcs	.+86     	; 0xfea <lround+0x5e>
     f94:	98 51       	subi	r25, 0x18	; 24
     f96:	a0 f0       	brcs	.+40     	; 0xfc0 <lround+0x34>
     f98:	e9 f0       	breq	.+58     	; 0xfd4 <lround+0x48>
     f9a:	98 30       	cpi	r25, 0x08	; 8
     f9c:	20 f5       	brcc	.+72     	; 0xfe6 <lround+0x5a>
     f9e:	09 2e       	mov	r0, r25
     fa0:	99 27       	eor	r25, r25
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	d1 f7       	brne	.-12     	; 0xfa2 <lround+0x16>
     fae:	12 c0       	rjmp	.+36     	; 0xfd4 <lround+0x48>
     fb0:	06 2e       	mov	r0, r22
     fb2:	67 2f       	mov	r22, r23
     fb4:	78 2f       	mov	r23, r24
     fb6:	88 27       	eor	r24, r24
     fb8:	98 5f       	subi	r25, 0xF8	; 248
     fba:	11 f4       	brne	.+4      	; 0xfc0 <lround+0x34>
     fbc:	00 0c       	add	r0, r0
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <lround+0x42>
     fc0:	99 3f       	cpi	r25, 0xF9	; 249
     fc2:	b4 f3       	brlt	.-20     	; 0xfb0 <lround+0x24>
     fc4:	86 95       	lsr	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	93 95       	inc	r25
     fcc:	d9 f7       	brne	.-10     	; 0xfc4 <lround+0x38>
     fce:	61 1d       	adc	r22, r1
     fd0:	71 1d       	adc	r23, r1
     fd2:	81 1d       	adc	r24, r1
     fd4:	3e f4       	brtc	.+14     	; 0xfe4 <lround+0x58>
     fd6:	90 95       	com	r25
     fd8:	80 95       	com	r24
     fda:	70 95       	com	r23
     fdc:	61 95       	neg	r22
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	8f 4f       	sbci	r24, 0xFF	; 255
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	08 95       	ret
     fe6:	68 94       	set
     fe8:	82 cf       	rjmp	.-252    	; 0xeee <__fp_szero>
     fea:	80 cf       	rjmp	.-256    	; 0xeec <__fp_zero>

00000fec <__mulsf3>:
     fec:	0b d0       	rcall	.+22     	; 0x1004 <__mulsf3x>
     fee:	4b cf       	rjmp	.-362    	; 0xe86 <__fp_round>
     ff0:	3c df       	rcall	.-392    	; 0xe6a <__fp_pscA>
     ff2:	28 f0       	brcs	.+10     	; 0xffe <__mulsf3+0x12>
     ff4:	41 df       	rcall	.-382    	; 0xe78 <__fp_pscB>
     ff6:	18 f0       	brcs	.+6      	; 0xffe <__mulsf3+0x12>
     ff8:	95 23       	and	r25, r21
     ffa:	09 f0       	breq	.+2      	; 0xffe <__mulsf3+0x12>
     ffc:	2d cf       	rjmp	.-422    	; 0xe58 <__fp_inf>
     ffe:	32 cf       	rjmp	.-412    	; 0xe64 <__fp_nan>
    1000:	11 24       	eor	r1, r1
    1002:	75 cf       	rjmp	.-278    	; 0xeee <__fp_szero>

00001004 <__mulsf3x>:
    1004:	51 df       	rcall	.-350    	; 0xea8 <__fp_split3>
    1006:	a0 f3       	brcs	.-24     	; 0xff0 <__mulsf3+0x4>

00001008 <__mulsf3_pse>:
    1008:	95 9f       	mul	r25, r21
    100a:	d1 f3       	breq	.-12     	; 0x1000 <__mulsf3+0x14>
    100c:	95 0f       	add	r25, r21
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	55 1f       	adc	r21, r21
    1012:	62 9f       	mul	r22, r18
    1014:	f0 01       	movw	r30, r0
    1016:	72 9f       	mul	r23, r18
    1018:	bb 27       	eor	r27, r27
    101a:	f0 0d       	add	r31, r0
    101c:	b1 1d       	adc	r27, r1
    101e:	63 9f       	mul	r22, r19
    1020:	aa 27       	eor	r26, r26
    1022:	f0 0d       	add	r31, r0
    1024:	b1 1d       	adc	r27, r1
    1026:	aa 1f       	adc	r26, r26
    1028:	64 9f       	mul	r22, r20
    102a:	66 27       	eor	r22, r22
    102c:	b0 0d       	add	r27, r0
    102e:	a1 1d       	adc	r26, r1
    1030:	66 1f       	adc	r22, r22
    1032:	82 9f       	mul	r24, r18
    1034:	22 27       	eor	r18, r18
    1036:	b0 0d       	add	r27, r0
    1038:	a1 1d       	adc	r26, r1
    103a:	62 1f       	adc	r22, r18
    103c:	73 9f       	mul	r23, r19
    103e:	b0 0d       	add	r27, r0
    1040:	a1 1d       	adc	r26, r1
    1042:	62 1f       	adc	r22, r18
    1044:	83 9f       	mul	r24, r19
    1046:	a0 0d       	add	r26, r0
    1048:	61 1d       	adc	r22, r1
    104a:	22 1f       	adc	r18, r18
    104c:	74 9f       	mul	r23, r20
    104e:	33 27       	eor	r19, r19
    1050:	a0 0d       	add	r26, r0
    1052:	61 1d       	adc	r22, r1
    1054:	23 1f       	adc	r18, r19
    1056:	84 9f       	mul	r24, r20
    1058:	60 0d       	add	r22, r0
    105a:	21 1d       	adc	r18, r1
    105c:	82 2f       	mov	r24, r18
    105e:	76 2f       	mov	r23, r22
    1060:	6a 2f       	mov	r22, r26
    1062:	11 24       	eor	r1, r1
    1064:	9f 57       	subi	r25, 0x7F	; 127
    1066:	50 40       	sbci	r21, 0x00	; 0
    1068:	8a f0       	brmi	.+34     	; 0x108c <__mulsf3_pse+0x84>
    106a:	e1 f0       	breq	.+56     	; 0x10a4 <__mulsf3_pse+0x9c>
    106c:	88 23       	and	r24, r24
    106e:	4a f0       	brmi	.+18     	; 0x1082 <__mulsf3_pse+0x7a>
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	bb 1f       	adc	r27, r27
    1076:	66 1f       	adc	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	91 50       	subi	r25, 0x01	; 1
    107e:	50 40       	sbci	r21, 0x00	; 0
    1080:	a9 f7       	brne	.-22     	; 0x106c <__mulsf3_pse+0x64>
    1082:	9e 3f       	cpi	r25, 0xFE	; 254
    1084:	51 05       	cpc	r21, r1
    1086:	70 f0       	brcs	.+28     	; 0x10a4 <__mulsf3_pse+0x9c>
    1088:	e7 ce       	rjmp	.-562    	; 0xe58 <__fp_inf>
    108a:	31 cf       	rjmp	.-414    	; 0xeee <__fp_szero>
    108c:	5f 3f       	cpi	r21, 0xFF	; 255
    108e:	ec f3       	brlt	.-6      	; 0x108a <__mulsf3_pse+0x82>
    1090:	98 3e       	cpi	r25, 0xE8	; 232
    1092:	dc f3       	brlt	.-10     	; 0x108a <__mulsf3_pse+0x82>
    1094:	86 95       	lsr	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f7 95       	ror	r31
    109e:	e7 95       	ror	r30
    10a0:	9f 5f       	subi	r25, 0xFF	; 255
    10a2:	c1 f7       	brne	.-16     	; 0x1094 <__mulsf3_pse+0x8c>
    10a4:	fe 2b       	or	r31, r30
    10a6:	88 0f       	add	r24, r24
    10a8:	91 1d       	adc	r25, r1
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	97 f9       	bld	r25, 7
    10b0:	08 95       	ret

000010b2 <__fp_cmp>:
    10b2:	99 0f       	add	r25, r25
    10b4:	00 08       	sbc	r0, r0
    10b6:	55 0f       	add	r21, r21
    10b8:	aa 0b       	sbc	r26, r26
    10ba:	e0 e8       	ldi	r30, 0x80	; 128
    10bc:	fe ef       	ldi	r31, 0xFE	; 254
    10be:	16 16       	cp	r1, r22
    10c0:	17 06       	cpc	r1, r23
    10c2:	e8 07       	cpc	r30, r24
    10c4:	f9 07       	cpc	r31, r25
    10c6:	c0 f0       	brcs	.+48     	; 0x10f8 <__fp_cmp+0x46>
    10c8:	12 16       	cp	r1, r18
    10ca:	13 06       	cpc	r1, r19
    10cc:	e4 07       	cpc	r30, r20
    10ce:	f5 07       	cpc	r31, r21
    10d0:	98 f0       	brcs	.+38     	; 0x10f8 <__fp_cmp+0x46>
    10d2:	62 1b       	sub	r22, r18
    10d4:	73 0b       	sbc	r23, r19
    10d6:	84 0b       	sbc	r24, r20
    10d8:	95 0b       	sbc	r25, r21
    10da:	39 f4       	brne	.+14     	; 0x10ea <__fp_cmp+0x38>
    10dc:	0a 26       	eor	r0, r26
    10de:	61 f0       	breq	.+24     	; 0x10f8 <__fp_cmp+0x46>
    10e0:	23 2b       	or	r18, r19
    10e2:	24 2b       	or	r18, r20
    10e4:	25 2b       	or	r18, r21
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <__fp_cmp+0x3e>
    10e8:	08 95       	ret
    10ea:	0a 26       	eor	r0, r26
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <__fp_cmp+0x3e>
    10ee:	a1 40       	sbci	r26, 0x01	; 1
    10f0:	a6 95       	lsr	r26
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	81 1d       	adc	r24, r1
    10f6:	81 1d       	adc	r24, r1
    10f8:	08 95       	ret

000010fa <__fp_mpack>:
    10fa:	9f 3f       	cpi	r25, 0xFF	; 255
    10fc:	31 f0       	breq	.+12     	; 0x110a <__fp_mpack_finite+0xc>

000010fe <__fp_mpack_finite>:
    10fe:	91 50       	subi	r25, 0x01	; 1
    1100:	20 f4       	brcc	.+8      	; 0x110a <__fp_mpack_finite+0xc>
    1102:	87 95       	ror	r24
    1104:	77 95       	ror	r23
    1106:	67 95       	ror	r22
    1108:	b7 95       	ror	r27
    110a:	88 0f       	add	r24, r24
    110c:	91 1d       	adc	r25, r1
    110e:	96 95       	lsr	r25
    1110:	87 95       	ror	r24
    1112:	97 f9       	bld	r25, 7
    1114:	08 95       	ret

00001116 <__fp_powser>:
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	1f 93       	push	r17
    111c:	0f 93       	push	r16
    111e:	ff 92       	push	r15
    1120:	ef 92       	push	r14
    1122:	df 92       	push	r13
    1124:	7b 01       	movw	r14, r22
    1126:	8c 01       	movw	r16, r24
    1128:	68 94       	set
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <__fp_powser+0x20>
    112c:	da 2e       	mov	r13, r26
    112e:	ef 01       	movw	r28, r30
    1130:	69 df       	rcall	.-302    	; 0x1004 <__mulsf3x>
    1132:	fe 01       	movw	r30, r28
    1134:	e8 94       	clt
    1136:	a5 91       	lpm	r26, Z+
    1138:	25 91       	lpm	r18, Z+
    113a:	35 91       	lpm	r19, Z+
    113c:	45 91       	lpm	r20, Z+
    113e:	55 91       	lpm	r21, Z+
    1140:	ae f3       	brts	.-22     	; 0x112c <__fp_powser+0x16>
    1142:	ef 01       	movw	r28, r30
    1144:	65 dd       	rcall	.-1334   	; 0xc10 <__addsf3x>
    1146:	fe 01       	movw	r30, r28
    1148:	97 01       	movw	r18, r14
    114a:	a8 01       	movw	r20, r16
    114c:	da 94       	dec	r13
    114e:	79 f7       	brne	.-34     	; 0x112e <__fp_powser+0x18>
    1150:	df 90       	pop	r13
    1152:	ef 90       	pop	r14
    1154:	ff 90       	pop	r15
    1156:	0f 91       	pop	r16
    1158:	1f 91       	pop	r17
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <__udivmodsi4>:
    1160:	a1 e2       	ldi	r26, 0x21	; 33
    1162:	1a 2e       	mov	r1, r26
    1164:	aa 1b       	sub	r26, r26
    1166:	bb 1b       	sub	r27, r27
    1168:	fd 01       	movw	r30, r26
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <__udivmodsi4_ep>

0000116c <__udivmodsi4_loop>:
    116c:	aa 1f       	adc	r26, r26
    116e:	bb 1f       	adc	r27, r27
    1170:	ee 1f       	adc	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	a2 17       	cp	r26, r18
    1176:	b3 07       	cpc	r27, r19
    1178:	e4 07       	cpc	r30, r20
    117a:	f5 07       	cpc	r31, r21
    117c:	20 f0       	brcs	.+8      	; 0x1186 <__udivmodsi4_ep>
    117e:	a2 1b       	sub	r26, r18
    1180:	b3 0b       	sbc	r27, r19
    1182:	e4 0b       	sbc	r30, r20
    1184:	f5 0b       	sbc	r31, r21

00001186 <__udivmodsi4_ep>:
    1186:	66 1f       	adc	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	1a 94       	dec	r1
    1190:	69 f7       	brne	.-38     	; 0x116c <__udivmodsi4_loop>
    1192:	60 95       	com	r22
    1194:	70 95       	com	r23
    1196:	80 95       	com	r24
    1198:	90 95       	com	r25
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	bd 01       	movw	r22, r26
    11a0:	cf 01       	movw	r24, r30
    11a2:	08 95       	ret

000011a4 <__umulhisi3>:
    11a4:	a2 9f       	mul	r26, r18
    11a6:	b0 01       	movw	r22, r0
    11a8:	b3 9f       	mul	r27, r19
    11aa:	c0 01       	movw	r24, r0
    11ac:	a3 9f       	mul	r26, r19
    11ae:	01 d0       	rcall	.+2      	; 0x11b2 <__umulhisi3+0xe>
    11b0:	b2 9f       	mul	r27, r18
    11b2:	70 0d       	add	r23, r0
    11b4:	81 1d       	adc	r24, r1
    11b6:	11 24       	eor	r1, r1
    11b8:	91 1d       	adc	r25, r1
    11ba:	08 95       	ret

000011bc <dtostrf>:
    11bc:	ef 92       	push	r14
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	e8 01       	movw	r28, r16
    11c8:	47 fd       	sbrc	r20, 7
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <dtostrf+0x14>
    11cc:	34 e0       	ldi	r19, 0x04	; 4
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <dtostrf+0x16>
    11d0:	34 e1       	ldi	r19, 0x14	; 20
    11d2:	04 2e       	mov	r0, r20
    11d4:	00 0c       	add	r0, r0
    11d6:	55 0b       	sbc	r21, r21
    11d8:	57 ff       	sbrs	r21, 7
    11da:	03 c0       	rjmp	.+6      	; 0x11e2 <dtostrf+0x26>
    11dc:	51 95       	neg	r21
    11de:	41 95       	neg	r20
    11e0:	51 09       	sbc	r21, r1
    11e2:	e3 2e       	mov	r14, r19
    11e4:	02 2f       	mov	r16, r18
    11e6:	24 2f       	mov	r18, r20
    11e8:	ae 01       	movw	r20, r28
    11ea:	07 d0       	rcall	.+14     	; 0x11fa <dtoa_prf>
    11ec:	ce 01       	movw	r24, r28
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ef 90       	pop	r14
    11f8:	08 95       	ret

000011fa <dtoa_prf>:
    11fa:	a9 e0       	ldi	r26, 0x09	; 9
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e2 e0       	ldi	r30, 0x02	; 2
    1200:	f9 e0       	ldi	r31, 0x09	; 9
    1202:	30 c2       	rjmp	.+1120   	; 0x1664 <__prologue_saves__+0xc>
    1204:	6a 01       	movw	r12, r20
    1206:	12 2f       	mov	r17, r18
    1208:	b0 2e       	mov	r11, r16
    120a:	2b e3       	ldi	r18, 0x3B	; 59
    120c:	20 17       	cp	r18, r16
    120e:	20 f0       	brcs	.+8      	; 0x1218 <dtoa_prf+0x1e>
    1210:	ff 24       	eor	r15, r15
    1212:	f3 94       	inc	r15
    1214:	f0 0e       	add	r15, r16
    1216:	02 c0       	rjmp	.+4      	; 0x121c <dtoa_prf+0x22>
    1218:	2c e3       	ldi	r18, 0x3C	; 60
    121a:	f2 2e       	mov	r15, r18
    121c:	0f 2d       	mov	r16, r15
    121e:	27 e0       	ldi	r18, 0x07	; 7
    1220:	ae 01       	movw	r20, r28
    1222:	4f 5f       	subi	r20, 0xFF	; 255
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	40 d1       	rcall	.+640    	; 0x14a8 <__ftoa_engine>
    1228:	bc 01       	movw	r22, r24
    122a:	49 81       	ldd	r20, Y+1	; 0x01
    122c:	84 2f       	mov	r24, r20
    122e:	89 70       	andi	r24, 0x09	; 9
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	31 f0       	breq	.+12     	; 0x1240 <dtoa_prf+0x46>
    1234:	e1 fc       	sbrc	r14, 1
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <dtoa_prf+0x4a>
    1238:	e0 fe       	sbrs	r14, 0
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <dtoa_prf+0x4e>
    123c:	90 e2       	ldi	r25, 0x20	; 32
    123e:	05 c0       	rjmp	.+10     	; 0x124a <dtoa_prf+0x50>
    1240:	9d e2       	ldi	r25, 0x2D	; 45
    1242:	03 c0       	rjmp	.+6      	; 0x124a <dtoa_prf+0x50>
    1244:	9b e2       	ldi	r25, 0x2B	; 43
    1246:	01 c0       	rjmp	.+2      	; 0x124a <dtoa_prf+0x50>
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	5e 2d       	mov	r21, r14
    124c:	50 71       	andi	r21, 0x10	; 16
    124e:	43 ff       	sbrs	r20, 3
    1250:	3c c0       	rjmp	.+120    	; 0x12ca <dtoa_prf+0xd0>
    1252:	91 11       	cpse	r25, r1
    1254:	02 c0       	rjmp	.+4      	; 0x125a <dtoa_prf+0x60>
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	01 c0       	rjmp	.+2      	; 0x125c <dtoa_prf+0x62>
    125a:	84 e0       	ldi	r24, 0x04	; 4
    125c:	81 17       	cp	r24, r17
    125e:	18 f4       	brcc	.+6      	; 0x1266 <dtoa_prf+0x6c>
    1260:	21 2f       	mov	r18, r17
    1262:	28 1b       	sub	r18, r24
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <dtoa_prf+0x6e>
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	51 11       	cpse	r21, r1
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <dtoa_prf+0x88>
    126c:	f6 01       	movw	r30, r12
    126e:	82 2f       	mov	r24, r18
    1270:	30 e2       	ldi	r19, 0x20	; 32
    1272:	88 23       	and	r24, r24
    1274:	19 f0       	breq	.+6      	; 0x127c <dtoa_prf+0x82>
    1276:	31 93       	st	Z+, r19
    1278:	81 50       	subi	r24, 0x01	; 1
    127a:	fb cf       	rjmp	.-10     	; 0x1272 <dtoa_prf+0x78>
    127c:	c2 0e       	add	r12, r18
    127e:	d1 1c       	adc	r13, r1
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	99 23       	and	r25, r25
    1284:	29 f0       	breq	.+10     	; 0x1290 <dtoa_prf+0x96>
    1286:	d6 01       	movw	r26, r12
    1288:	9c 93       	st	X, r25
    128a:	f6 01       	movw	r30, r12
    128c:	31 96       	adiw	r30, 0x01	; 1
    128e:	6f 01       	movw	r12, r30
    1290:	c6 01       	movw	r24, r12
    1292:	03 96       	adiw	r24, 0x03	; 3
    1294:	e2 fe       	sbrs	r14, 2
    1296:	0a c0       	rjmp	.+20     	; 0x12ac <dtoa_prf+0xb2>
    1298:	3e e4       	ldi	r19, 0x4E	; 78
    129a:	d6 01       	movw	r26, r12
    129c:	3c 93       	st	X, r19
    129e:	41 e4       	ldi	r20, 0x41	; 65
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	4c 93       	st	X, r20
    12a4:	11 97       	sbiw	r26, 0x01	; 1
    12a6:	12 96       	adiw	r26, 0x02	; 2
    12a8:	3c 93       	st	X, r19
    12aa:	06 c0       	rjmp	.+12     	; 0x12b8 <dtoa_prf+0xbe>
    12ac:	3e e6       	ldi	r19, 0x6E	; 110
    12ae:	f6 01       	movw	r30, r12
    12b0:	30 83       	st	Z, r19
    12b2:	41 e6       	ldi	r20, 0x61	; 97
    12b4:	41 83       	std	Z+1, r20	; 0x01
    12b6:	32 83       	std	Z+2, r19	; 0x02
    12b8:	fc 01       	movw	r30, r24
    12ba:	32 2f       	mov	r19, r18
    12bc:	40 e2       	ldi	r20, 0x20	; 32
    12be:	33 23       	and	r19, r19
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <dtoa_prf+0xca>
    12c2:	42 c0       	rjmp	.+132    	; 0x1348 <dtoa_prf+0x14e>
    12c4:	41 93       	st	Z+, r20
    12c6:	31 50       	subi	r19, 0x01	; 1
    12c8:	fa cf       	rjmp	.-12     	; 0x12be <dtoa_prf+0xc4>
    12ca:	42 ff       	sbrs	r20, 2
    12cc:	44 c0       	rjmp	.+136    	; 0x1356 <dtoa_prf+0x15c>
    12ce:	91 11       	cpse	r25, r1
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <dtoa_prf+0xdc>
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <dtoa_prf+0xde>
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	81 17       	cp	r24, r17
    12da:	18 f4       	brcc	.+6      	; 0x12e2 <dtoa_prf+0xe8>
    12dc:	21 2f       	mov	r18, r17
    12de:	28 1b       	sub	r18, r24
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <dtoa_prf+0xea>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	51 11       	cpse	r21, r1
    12e6:	0b c0       	rjmp	.+22     	; 0x12fe <dtoa_prf+0x104>
    12e8:	f6 01       	movw	r30, r12
    12ea:	82 2f       	mov	r24, r18
    12ec:	30 e2       	ldi	r19, 0x20	; 32
    12ee:	88 23       	and	r24, r24
    12f0:	19 f0       	breq	.+6      	; 0x12f8 <dtoa_prf+0xfe>
    12f2:	31 93       	st	Z+, r19
    12f4:	81 50       	subi	r24, 0x01	; 1
    12f6:	fb cf       	rjmp	.-10     	; 0x12ee <dtoa_prf+0xf4>
    12f8:	c2 0e       	add	r12, r18
    12fa:	d1 1c       	adc	r13, r1
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	99 23       	and	r25, r25
    1300:	29 f0       	breq	.+10     	; 0x130c <dtoa_prf+0x112>
    1302:	d6 01       	movw	r26, r12
    1304:	9c 93       	st	X, r25
    1306:	f6 01       	movw	r30, r12
    1308:	31 96       	adiw	r30, 0x01	; 1
    130a:	6f 01       	movw	r12, r30
    130c:	c6 01       	movw	r24, r12
    130e:	03 96       	adiw	r24, 0x03	; 3
    1310:	e2 fe       	sbrs	r14, 2
    1312:	0b c0       	rjmp	.+22     	; 0x132a <dtoa_prf+0x130>
    1314:	39 e4       	ldi	r19, 0x49	; 73
    1316:	d6 01       	movw	r26, r12
    1318:	3c 93       	st	X, r19
    131a:	3e e4       	ldi	r19, 0x4E	; 78
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	3c 93       	st	X, r19
    1320:	11 97       	sbiw	r26, 0x01	; 1
    1322:	36 e4       	ldi	r19, 0x46	; 70
    1324:	12 96       	adiw	r26, 0x02	; 2
    1326:	3c 93       	st	X, r19
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <dtoa_prf+0x13e>
    132a:	39 e6       	ldi	r19, 0x69	; 105
    132c:	f6 01       	movw	r30, r12
    132e:	30 83       	st	Z, r19
    1330:	3e e6       	ldi	r19, 0x6E	; 110
    1332:	31 83       	std	Z+1, r19	; 0x01
    1334:	36 e6       	ldi	r19, 0x66	; 102
    1336:	32 83       	std	Z+2, r19	; 0x02
    1338:	fc 01       	movw	r30, r24
    133a:	32 2f       	mov	r19, r18
    133c:	40 e2       	ldi	r20, 0x20	; 32
    133e:	33 23       	and	r19, r19
    1340:	19 f0       	breq	.+6      	; 0x1348 <dtoa_prf+0x14e>
    1342:	41 93       	st	Z+, r20
    1344:	31 50       	subi	r19, 0x01	; 1
    1346:	fb cf       	rjmp	.-10     	; 0x133e <dtoa_prf+0x144>
    1348:	fc 01       	movw	r30, r24
    134a:	e2 0f       	add	r30, r18
    134c:	f1 1d       	adc	r31, r1
    134e:	10 82       	st	Z, r1
    1350:	8e ef       	ldi	r24, 0xFE	; 254
    1352:	9f ef       	ldi	r25, 0xFF	; 255
    1354:	a6 c0       	rjmp	.+332    	; 0x14a2 <dtoa_prf+0x2a8>
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	91 11       	cpse	r25, r1
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <dtoa_prf+0x168>
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	16 16       	cp	r1, r22
    1364:	17 06       	cpc	r1, r23
    1366:	1c f4       	brge	.+6      	; 0x136e <dtoa_prf+0x174>
    1368:	fb 01       	movw	r30, r22
    136a:	31 96       	adiw	r30, 0x01	; 1
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <dtoa_prf+0x178>
    136e:	e1 e0       	ldi	r30, 0x01	; 1
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	2e 0f       	add	r18, r30
    1374:	3f 1f       	adc	r19, r31
    1376:	bb 20       	and	r11, r11
    1378:	21 f0       	breq	.+8      	; 0x1382 <dtoa_prf+0x188>
    137a:	eb 2d       	mov	r30, r11
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	31 96       	adiw	r30, 0x01	; 1
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <dtoa_prf+0x18c>
    1382:	e0 e0       	ldi	r30, 0x00	; 0
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	2e 0f       	add	r18, r30
    1388:	3f 1f       	adc	r19, r31
    138a:	e1 2f       	mov	r30, r17
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	2e 17       	cp	r18, r30
    1390:	3f 07       	cpc	r19, r31
    1392:	1c f4       	brge	.+6      	; 0x139a <dtoa_prf+0x1a0>
    1394:	12 1b       	sub	r17, r18
    1396:	21 2f       	mov	r18, r17
    1398:	01 c0       	rjmp	.+2      	; 0x139c <dtoa_prf+0x1a2>
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	8e 2d       	mov	r24, r14
    139e:	88 71       	andi	r24, 0x18	; 24
    13a0:	59 f4       	brne	.+22     	; 0x13b8 <dtoa_prf+0x1be>
    13a2:	f6 01       	movw	r30, r12
    13a4:	82 2f       	mov	r24, r18
    13a6:	30 e2       	ldi	r19, 0x20	; 32
    13a8:	88 23       	and	r24, r24
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <dtoa_prf+0x1b8>
    13ac:	31 93       	st	Z+, r19
    13ae:	81 50       	subi	r24, 0x01	; 1
    13b0:	fb cf       	rjmp	.-10     	; 0x13a8 <dtoa_prf+0x1ae>
    13b2:	c2 0e       	add	r12, r18
    13b4:	d1 1c       	adc	r13, r1
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	99 23       	and	r25, r25
    13ba:	29 f0       	breq	.+10     	; 0x13c6 <dtoa_prf+0x1cc>
    13bc:	d6 01       	movw	r26, r12
    13be:	9c 93       	st	X, r25
    13c0:	f6 01       	movw	r30, r12
    13c2:	31 96       	adiw	r30, 0x01	; 1
    13c4:	6f 01       	movw	r12, r30
    13c6:	51 11       	cpse	r21, r1
    13c8:	0b c0       	rjmp	.+22     	; 0x13e0 <dtoa_prf+0x1e6>
    13ca:	f6 01       	movw	r30, r12
    13cc:	82 2f       	mov	r24, r18
    13ce:	90 e3       	ldi	r25, 0x30	; 48
    13d0:	88 23       	and	r24, r24
    13d2:	19 f0       	breq	.+6      	; 0x13da <dtoa_prf+0x1e0>
    13d4:	91 93       	st	Z+, r25
    13d6:	81 50       	subi	r24, 0x01	; 1
    13d8:	fb cf       	rjmp	.-10     	; 0x13d0 <dtoa_prf+0x1d6>
    13da:	c2 0e       	add	r12, r18
    13dc:	d1 1c       	adc	r13, r1
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	0f 2d       	mov	r16, r15
    13e2:	06 0f       	add	r16, r22
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	34 2f       	mov	r19, r20
    13e8:	30 71       	andi	r19, 0x10	; 16
    13ea:	44 ff       	sbrs	r20, 4
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <dtoa_prf+0x1fa>
    13ee:	91 33       	cpi	r25, 0x31	; 49
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <dtoa_prf+0x1fa>
    13f2:	01 50       	subi	r16, 0x01	; 1
    13f4:	10 16       	cp	r1, r16
    13f6:	24 f4       	brge	.+8      	; 0x1400 <dtoa_prf+0x206>
    13f8:	09 30       	cpi	r16, 0x09	; 9
    13fa:	18 f0       	brcs	.+6      	; 0x1402 <dtoa_prf+0x208>
    13fc:	08 e0       	ldi	r16, 0x08	; 8
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <dtoa_prf+0x208>
    1400:	01 e0       	ldi	r16, 0x01	; 1
    1402:	ab 01       	movw	r20, r22
    1404:	77 ff       	sbrs	r23, 7
    1406:	02 c0       	rjmp	.+4      	; 0x140c <dtoa_prf+0x212>
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	fb 01       	movw	r30, r22
    140e:	e4 1b       	sub	r30, r20
    1410:	f5 0b       	sbc	r31, r21
    1412:	a1 e0       	ldi	r26, 0x01	; 1
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ac 0f       	add	r26, r28
    1418:	bd 1f       	adc	r27, r29
    141a:	ea 0f       	add	r30, r26
    141c:	fb 1f       	adc	r31, r27
    141e:	8e e2       	ldi	r24, 0x2E	; 46
    1420:	a8 2e       	mov	r10, r24
    1422:	4b 01       	movw	r8, r22
    1424:	80 1a       	sub	r8, r16
    1426:	91 08       	sbc	r9, r1
    1428:	0b 2d       	mov	r16, r11
    142a:	10 e0       	ldi	r17, 0x00	; 0
    142c:	11 95       	neg	r17
    142e:	01 95       	neg	r16
    1430:	11 09       	sbc	r17, r1
    1432:	4f 3f       	cpi	r20, 0xFF	; 255
    1434:	bf ef       	ldi	r27, 0xFF	; 255
    1436:	5b 07       	cpc	r21, r27
    1438:	21 f4       	brne	.+8      	; 0x1442 <dtoa_prf+0x248>
    143a:	d6 01       	movw	r26, r12
    143c:	ac 92       	st	X, r10
    143e:	11 96       	adiw	r26, 0x01	; 1
    1440:	6d 01       	movw	r12, r26
    1442:	64 17       	cp	r22, r20
    1444:	75 07       	cpc	r23, r21
    1446:	2c f0       	brlt	.+10     	; 0x1452 <dtoa_prf+0x258>
    1448:	84 16       	cp	r8, r20
    144a:	95 06       	cpc	r9, r21
    144c:	14 f4       	brge	.+4      	; 0x1452 <dtoa_prf+0x258>
    144e:	81 81       	ldd	r24, Z+1	; 0x01
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <dtoa_prf+0x25a>
    1452:	80 e3       	ldi	r24, 0x30	; 48
    1454:	41 50       	subi	r20, 0x01	; 1
    1456:	51 09       	sbc	r21, r1
    1458:	31 96       	adiw	r30, 0x01	; 1
    145a:	d6 01       	movw	r26, r12
    145c:	11 96       	adiw	r26, 0x01	; 1
    145e:	7d 01       	movw	r14, r26
    1460:	40 17       	cp	r20, r16
    1462:	51 07       	cpc	r21, r17
    1464:	24 f0       	brlt	.+8      	; 0x146e <dtoa_prf+0x274>
    1466:	d6 01       	movw	r26, r12
    1468:	8c 93       	st	X, r24
    146a:	67 01       	movw	r12, r14
    146c:	e2 cf       	rjmp	.-60     	; 0x1432 <dtoa_prf+0x238>
    146e:	64 17       	cp	r22, r20
    1470:	75 07       	cpc	r23, r21
    1472:	39 f4       	brne	.+14     	; 0x1482 <dtoa_prf+0x288>
    1474:	96 33       	cpi	r25, 0x36	; 54
    1476:	20 f4       	brcc	.+8      	; 0x1480 <dtoa_prf+0x286>
    1478:	95 33       	cpi	r25, 0x35	; 53
    147a:	19 f4       	brne	.+6      	; 0x1482 <dtoa_prf+0x288>
    147c:	31 11       	cpse	r19, r1
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <dtoa_prf+0x288>
    1480:	81 e3       	ldi	r24, 0x31	; 49
    1482:	f6 01       	movw	r30, r12
    1484:	80 83       	st	Z, r24
    1486:	f7 01       	movw	r30, r14
    1488:	82 2f       	mov	r24, r18
    148a:	90 e2       	ldi	r25, 0x20	; 32
    148c:	88 23       	and	r24, r24
    148e:	19 f0       	breq	.+6      	; 0x1496 <dtoa_prf+0x29c>
    1490:	91 93       	st	Z+, r25
    1492:	81 50       	subi	r24, 0x01	; 1
    1494:	fb cf       	rjmp	.-10     	; 0x148c <dtoa_prf+0x292>
    1496:	f7 01       	movw	r30, r14
    1498:	e2 0f       	add	r30, r18
    149a:	f1 1d       	adc	r31, r1
    149c:	10 82       	st	Z, r1
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	29 96       	adiw	r28, 0x09	; 9
    14a4:	ec e0       	ldi	r30, 0x0C	; 12
    14a6:	fa c0       	rjmp	.+500    	; 0x169c <__epilogue_restores__+0xc>

000014a8 <__ftoa_engine>:
    14a8:	28 30       	cpi	r18, 0x08	; 8
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <__ftoa_engine+0x6>
    14ac:	27 e0       	ldi	r18, 0x07	; 7
    14ae:	33 27       	eor	r19, r19
    14b0:	da 01       	movw	r26, r20
    14b2:	99 0f       	add	r25, r25
    14b4:	31 1d       	adc	r19, r1
    14b6:	87 fd       	sbrc	r24, 7
    14b8:	91 60       	ori	r25, 0x01	; 1
    14ba:	00 96       	adiw	r24, 0x00	; 0
    14bc:	61 05       	cpc	r22, r1
    14be:	71 05       	cpc	r23, r1
    14c0:	39 f4       	brne	.+14     	; 0x14d0 <__ftoa_engine+0x28>
    14c2:	32 60       	ori	r19, 0x02	; 2
    14c4:	2e 5f       	subi	r18, 0xFE	; 254
    14c6:	3d 93       	st	X+, r19
    14c8:	30 e3       	ldi	r19, 0x30	; 48
    14ca:	2a 95       	dec	r18
    14cc:	e1 f7       	brne	.-8      	; 0x14c6 <__ftoa_engine+0x1e>
    14ce:	08 95       	ret
    14d0:	9f 3f       	cpi	r25, 0xFF	; 255
    14d2:	30 f0       	brcs	.+12     	; 0x14e0 <__ftoa_engine+0x38>
    14d4:	80 38       	cpi	r24, 0x80	; 128
    14d6:	71 05       	cpc	r23, r1
    14d8:	61 05       	cpc	r22, r1
    14da:	09 f0       	breq	.+2      	; 0x14de <__ftoa_engine+0x36>
    14dc:	3c 5f       	subi	r19, 0xFC	; 252
    14de:	3c 5f       	subi	r19, 0xFC	; 252
    14e0:	3d 93       	st	X+, r19
    14e2:	91 30       	cpi	r25, 0x01	; 1
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <__ftoa_engine+0x40>
    14e6:	80 68       	ori	r24, 0x80	; 128
    14e8:	91 1d       	adc	r25, r1
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	1f 93       	push	r17
    14f0:	0f 93       	push	r16
    14f2:	ff 92       	push	r15
    14f4:	ef 92       	push	r14
    14f6:	19 2f       	mov	r17, r25
    14f8:	98 7f       	andi	r25, 0xF8	; 248
    14fa:	96 95       	lsr	r25
    14fc:	e9 2f       	mov	r30, r25
    14fe:	96 95       	lsr	r25
    1500:	96 95       	lsr	r25
    1502:	e9 0f       	add	r30, r25
    1504:	ff 27       	eor	r31, r31
    1506:	ea 52       	subi	r30, 0x2A	; 42
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	99 27       	eor	r25, r25
    150c:	33 27       	eor	r19, r19
    150e:	ee 24       	eor	r14, r14
    1510:	ff 24       	eor	r15, r15
    1512:	a7 01       	movw	r20, r14
    1514:	e7 01       	movw	r28, r14
    1516:	05 90       	lpm	r0, Z+
    1518:	08 94       	sec
    151a:	07 94       	ror	r0
    151c:	28 f4       	brcc	.+10     	; 0x1528 <__ftoa_engine+0x80>
    151e:	36 0f       	add	r19, r22
    1520:	e7 1e       	adc	r14, r23
    1522:	f8 1e       	adc	r15, r24
    1524:	49 1f       	adc	r20, r25
    1526:	51 1d       	adc	r21, r1
    1528:	66 0f       	add	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	06 94       	lsr	r0
    1532:	a1 f7       	brne	.-24     	; 0x151c <__ftoa_engine+0x74>
    1534:	05 90       	lpm	r0, Z+
    1536:	07 94       	ror	r0
    1538:	28 f4       	brcc	.+10     	; 0x1544 <__ftoa_engine+0x9c>
    153a:	e7 0e       	add	r14, r23
    153c:	f8 1e       	adc	r15, r24
    153e:	49 1f       	adc	r20, r25
    1540:	56 1f       	adc	r21, r22
    1542:	c1 1d       	adc	r28, r1
    1544:	77 0f       	add	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	66 1f       	adc	r22, r22
    154c:	06 94       	lsr	r0
    154e:	a1 f7       	brne	.-24     	; 0x1538 <__ftoa_engine+0x90>
    1550:	05 90       	lpm	r0, Z+
    1552:	07 94       	ror	r0
    1554:	28 f4       	brcc	.+10     	; 0x1560 <__ftoa_engine+0xb8>
    1556:	f8 0e       	add	r15, r24
    1558:	49 1f       	adc	r20, r25
    155a:	56 1f       	adc	r21, r22
    155c:	c7 1f       	adc	r28, r23
    155e:	d1 1d       	adc	r29, r1
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	66 1f       	adc	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	06 94       	lsr	r0
    156a:	a1 f7       	brne	.-24     	; 0x1554 <__ftoa_engine+0xac>
    156c:	05 90       	lpm	r0, Z+
    156e:	07 94       	ror	r0
    1570:	20 f4       	brcc	.+8      	; 0x157a <__ftoa_engine+0xd2>
    1572:	49 0f       	add	r20, r25
    1574:	56 1f       	adc	r21, r22
    1576:	c7 1f       	adc	r28, r23
    1578:	d8 1f       	adc	r29, r24
    157a:	99 0f       	add	r25, r25
    157c:	66 1f       	adc	r22, r22
    157e:	77 1f       	adc	r23, r23
    1580:	88 1f       	adc	r24, r24
    1582:	06 94       	lsr	r0
    1584:	a9 f7       	brne	.-22     	; 0x1570 <__ftoa_engine+0xc8>
    1586:	84 91       	lpm	r24, Z
    1588:	10 95       	com	r17
    158a:	17 70       	andi	r17, 0x07	; 7
    158c:	41 f0       	breq	.+16     	; 0x159e <__ftoa_engine+0xf6>
    158e:	d6 95       	lsr	r29
    1590:	c7 95       	ror	r28
    1592:	57 95       	ror	r21
    1594:	47 95       	ror	r20
    1596:	f7 94       	ror	r15
    1598:	e7 94       	ror	r14
    159a:	1a 95       	dec	r17
    159c:	c1 f7       	brne	.-16     	; 0x158e <__ftoa_engine+0xe6>
    159e:	ec e7       	ldi	r30, 0x7C	; 124
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	68 94       	set
    15a4:	15 90       	lpm	r1, Z+
    15a6:	15 91       	lpm	r17, Z+
    15a8:	35 91       	lpm	r19, Z+
    15aa:	65 91       	lpm	r22, Z+
    15ac:	95 91       	lpm	r25, Z+
    15ae:	05 90       	lpm	r0, Z+
    15b0:	7f e2       	ldi	r23, 0x2F	; 47
    15b2:	73 95       	inc	r23
    15b4:	e1 18       	sub	r14, r1
    15b6:	f1 0a       	sbc	r15, r17
    15b8:	43 0b       	sbc	r20, r19
    15ba:	56 0b       	sbc	r21, r22
    15bc:	c9 0b       	sbc	r28, r25
    15be:	d0 09       	sbc	r29, r0
    15c0:	c0 f7       	brcc	.-16     	; 0x15b2 <__ftoa_engine+0x10a>
    15c2:	e1 0c       	add	r14, r1
    15c4:	f1 1e       	adc	r15, r17
    15c6:	43 1f       	adc	r20, r19
    15c8:	56 1f       	adc	r21, r22
    15ca:	c9 1f       	adc	r28, r25
    15cc:	d0 1d       	adc	r29, r0
    15ce:	7e f4       	brtc	.+30     	; 0x15ee <__ftoa_engine+0x146>
    15d0:	70 33       	cpi	r23, 0x30	; 48
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <__ftoa_engine+0x130>
    15d4:	8a 95       	dec	r24
    15d6:	e6 cf       	rjmp	.-52     	; 0x15a4 <__ftoa_engine+0xfc>
    15d8:	e8 94       	clt
    15da:	01 50       	subi	r16, 0x01	; 1
    15dc:	30 f0       	brcs	.+12     	; 0x15ea <__ftoa_engine+0x142>
    15de:	08 0f       	add	r16, r24
    15e0:	0a f4       	brpl	.+2      	; 0x15e4 <__ftoa_engine+0x13c>
    15e2:	00 27       	eor	r16, r16
    15e4:	02 17       	cp	r16, r18
    15e6:	08 f4       	brcc	.+2      	; 0x15ea <__ftoa_engine+0x142>
    15e8:	20 2f       	mov	r18, r16
    15ea:	23 95       	inc	r18
    15ec:	02 2f       	mov	r16, r18
    15ee:	7a 33       	cpi	r23, 0x3A	; 58
    15f0:	28 f0       	brcs	.+10     	; 0x15fc <__ftoa_engine+0x154>
    15f2:	79 e3       	ldi	r23, 0x39	; 57
    15f4:	7d 93       	st	X+, r23
    15f6:	2a 95       	dec	r18
    15f8:	e9 f7       	brne	.-6      	; 0x15f4 <__ftoa_engine+0x14c>
    15fa:	10 c0       	rjmp	.+32     	; 0x161c <__ftoa_engine+0x174>
    15fc:	7d 93       	st	X+, r23
    15fe:	2a 95       	dec	r18
    1600:	89 f6       	brne	.-94     	; 0x15a4 <__ftoa_engine+0xfc>
    1602:	06 94       	lsr	r0
    1604:	97 95       	ror	r25
    1606:	67 95       	ror	r22
    1608:	37 95       	ror	r19
    160a:	17 95       	ror	r17
    160c:	17 94       	ror	r1
    160e:	e1 18       	sub	r14, r1
    1610:	f1 0a       	sbc	r15, r17
    1612:	43 0b       	sbc	r20, r19
    1614:	56 0b       	sbc	r21, r22
    1616:	c9 0b       	sbc	r28, r25
    1618:	d0 09       	sbc	r29, r0
    161a:	98 f0       	brcs	.+38     	; 0x1642 <__ftoa_engine+0x19a>
    161c:	23 95       	inc	r18
    161e:	7e 91       	ld	r23, -X
    1620:	73 95       	inc	r23
    1622:	7a 33       	cpi	r23, 0x3A	; 58
    1624:	08 f0       	brcs	.+2      	; 0x1628 <__ftoa_engine+0x180>
    1626:	70 e3       	ldi	r23, 0x30	; 48
    1628:	7c 93       	st	X, r23
    162a:	20 13       	cpse	r18, r16
    162c:	b8 f7       	brcc	.-18     	; 0x161c <__ftoa_engine+0x174>
    162e:	7e 91       	ld	r23, -X
    1630:	70 61       	ori	r23, 0x10	; 16
    1632:	7d 93       	st	X+, r23
    1634:	30 f0       	brcs	.+12     	; 0x1642 <__ftoa_engine+0x19a>
    1636:	83 95       	inc	r24
    1638:	71 e3       	ldi	r23, 0x31	; 49
    163a:	7d 93       	st	X+, r23
    163c:	70 e3       	ldi	r23, 0x30	; 48
    163e:	2a 95       	dec	r18
    1640:	e1 f7       	brne	.-8      	; 0x163a <__ftoa_engine+0x192>
    1642:	11 24       	eor	r1, r1
    1644:	ef 90       	pop	r14
    1646:	ff 90       	pop	r15
    1648:	0f 91       	pop	r16
    164a:	1f 91       	pop	r17
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	99 27       	eor	r25, r25
    1652:	87 fd       	sbrc	r24, 7
    1654:	90 95       	com	r25
    1656:	08 95       	ret

00001658 <__prologue_saves__>:
    1658:	2f 92       	push	r2
    165a:	3f 92       	push	r3
    165c:	4f 92       	push	r4
    165e:	5f 92       	push	r5
    1660:	6f 92       	push	r6
    1662:	7f 92       	push	r7
    1664:	8f 92       	push	r8
    1666:	9f 92       	push	r9
    1668:	af 92       	push	r10
    166a:	bf 92       	push	r11
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	ca 1b       	sub	r28, r26
    1682:	db 0b       	sbc	r29, r27
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	09 94       	ijmp

00001690 <__epilogue_restores__>:
    1690:	2a 88       	ldd	r2, Y+18	; 0x12
    1692:	39 88       	ldd	r3, Y+17	; 0x11
    1694:	48 88       	ldd	r4, Y+16	; 0x10
    1696:	5f 84       	ldd	r5, Y+15	; 0x0f
    1698:	6e 84       	ldd	r6, Y+14	; 0x0e
    169a:	7d 84       	ldd	r7, Y+13	; 0x0d
    169c:	8c 84       	ldd	r8, Y+12	; 0x0c
    169e:	9b 84       	ldd	r9, Y+11	; 0x0b
    16a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    16a2:	b9 84       	ldd	r11, Y+9	; 0x09
    16a4:	c8 84       	ldd	r12, Y+8	; 0x08
    16a6:	df 80       	ldd	r13, Y+7	; 0x07
    16a8:	ee 80       	ldd	r14, Y+6	; 0x06
    16aa:	fd 80       	ldd	r15, Y+5	; 0x05
    16ac:	0c 81       	ldd	r16, Y+4	; 0x04
    16ae:	1b 81       	ldd	r17, Y+3	; 0x03
    16b0:	aa 81       	ldd	r26, Y+2	; 0x02
    16b2:	b9 81       	ldd	r27, Y+1	; 0x01
    16b4:	ce 0f       	add	r28, r30
    16b6:	d1 1d       	adc	r29, r1
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	ed 01       	movw	r28, r26
    16c4:	08 95       	ret

000016c6 <_exit>:
    16c6:	f8 94       	cli

000016c8 <__stop_program>:
    16c8:	ff cf       	rjmp	.-2      	; 0x16c8 <__stop_program>
